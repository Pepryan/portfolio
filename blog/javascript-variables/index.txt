1:"$Sreact.fragment"
2:I[5798,["844","static/chunks/ee560e2c-464c506caba219a9.js","177","static/chunks/app/layout-6dbc5343b110f9a9.js"],"default"]
3:I[3932,["844","static/chunks/ee560e2c-464c506caba219a9.js","177","static/chunks/app/layout-6dbc5343b110f9a9.js"],"ThemeProvider"]
4:I[843,["844","static/chunks/ee560e2c-464c506caba219a9.js","177","static/chunks/app/layout-6dbc5343b110f9a9.js"],"default"]
5:I[7555,[],""]
6:I[1295,[],""]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[9665,[],"ViewportBoundary"]
11:I[6614,[],""]
:HL["/portfolio/_next/static/css/93bab39517bb214e.css","style"]
0:{"P":null,"b":"Ro7FdjP5CIlOy7AOuzAo9","p":"/portfolio","c":["","blog","javascript-variables",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","javascript-variables","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/portfolio/_next/static/css/93bab39517bb214e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/portfolio/favicon.ico?v=1749352943478","type":"image/x-icon","sizes":"16x16"}],["$","link",null,{"rel":"icon","href":"/portfolio/favicon.ico?v=1749352943478","type":"image/vnd.microsoft.icon","sizes":"16x16 32x32 48x48"}],["$","link",null,{"rel":"shortcut icon","href":"/portfolio/favicon.ico?v=1749352943478","type":"image/x-icon"}],["$","link",null,{"rel":"apple-touch-icon","href":"/portfolio/favicon.ico?v=1749352943478","sizes":"180x180"}],["$","title",null,{"children":"Febryan Portfolio - Cloud Engineer & DevOps Specialist"}],["$","meta",null,{"name":"description","content":"Personal portfolio and technical blog by Febryan Ramadhan. Cloud Engineer specializing in DevOps, Infrastructure, and Automation. Sharing tutorials and insights about modern technology."}],["$","meta",null,{"name":"keywords","content":"portfolio,blog,web development,javascript,react,next.js,cloud engineer,devops,infrastructure,automation"}],["$","meta",null,{"name":"author","content":"Febryan Ramadhan"}],["$","meta",null,{"name":"creator","content":"Febryan Ramadhan"}],["$","meta",null,{"name":"publisher","content":"Febryan Portfolio"}],["$","meta",null,{"name":"robots","content":"index, follow"}],["$","link",null,{"rel":"canonical","href":"https://pepryan.github.io/portfolio"}],["$","meta",null,{"property":"og:title","content":"Febryan Portfolio - Cloud Engineer & DevOps Specialist"}],["$","meta",null,{"property":"og:description","content":"Personal portfolio and technical blog by Febryan Ramadhan. Cloud Engineer specializing in DevOps, Infrastructure, and Automation."}],["$","meta",null,{"property":"og:image","content":"https://pepryan.github.io/portfolio/images/default-og-image.png"}],["$","meta",null,{"property":"og:url","content":"https://pepryan.github.io/portfolio"}],["$","meta",null,{"property":"og:type","content":"website"}],["$","meta",null,{"property":"og:site_name","content":"Febryan Portfolio"}],["$","meta",null,{"property":"og:locale","content":"id_ID"}],["$","meta",null,{"property":"og:image:width","content":"1200"}],["$","meta",null,{"property":"og:image:height","content":"630"}],["$","meta",null,{"property":"og:image:type","content":"image/png"}],["$","meta",null,{"property":"og:image:alt","content":"Febryan Portfolio - Cloud Engineer & DevOps Specialist"}],["$","meta",null,{"name":"twitter:card","content":"summary_large_image"}],["$","meta",null,{"name":"twitter:title","content":"Febryan Portfolio - Cloud Engineer & DevOps Specialist"}],["$","meta",null,{"name":"twitter:description","content":"Personal portfolio and technical blog by Febryan Ramadhan. Cloud Engineer specializing in DevOps, Infrastructure, and Automation."}],["$","meta",null,{"name":"twitter:image","content":"https://pepryan.github.io/portfolio/images/default-og-image.png"}],["$","meta",null,{"name":"twitter:creator","content":"@pepryan"}],["$","meta",null,{"name":"twitter:site","content":"@pepryan"}],["$","meta",null,{"name":"twitter:domain","content":"pepryan.github.io"}],["$","meta",null,{"name":"twitter:url","content":"https://pepryan.github.io/portfolio"}],["$","meta",null,{"name":"theme-color","content":"#000000"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta",null,{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta",null,{"name":"format-detection","content":"telephone=no"}],["$","meta",null,{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"Person\",\"@id\":\"https://pepryan.github.io/portfolio/#person\",\"name\":\"Febryan Ramadhan\",\"url\":\"https://pepryan.github.io/portfolio\",\"image\":{\"@type\":\"ImageObject\",\"url\":\"https://pepryan.github.io/portfolio/images/default-og-image.png\",\"width\":1200,\"height\":630},\"description\":\"Cloud Engineer specializing in DevOps, Infrastructure, and Automation\",\"jobTitle\":\"Cloud Engineer & DevOps Specialist\",\"worksFor\":{\"@type\":\"Organization\",\"name\":\"Technology Industry\"},\"knowsAbout\":[\"Cloud Computing\",\"DevOps\",\"Infrastructure as Code\",\"Automation\",\"Web Development\",\"JavaScript\",\"React\",\"Next.js\"],\"sameAs\":[\"https://github.com/pepryan\",\"https://twitter.com/pepryan\"]}"}}]]}],["$","body",null,{"suppressHydrationWarning":true,"className":"bg-white dark:bg-neutral-900","children":[["$","$L2",null,{}],["$","$L3",null,{"children":["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","javascript-variables","d"],["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Jy--C9QS2DUjKAcHGCcwk",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[4911,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"Var, Let, dan Const: Rahasia Penting yang Wajib Dipahami Developer! | Febryan Blog | Febryan Portfolio"}],["$","meta","1",{"name":"description","content":"Pelajari perbedaan antara var, let, dan const di JavaScript serta kenapa kamu harus mulai menggunakan let dan const untuk kode yang lebih aman dan modern!"}],["$","link","2",{"rel":"author","href":"https://pepryan.github.io/portfolio"}],["$","meta","3",{"name":"author","content":"Febryan Ramadhan"}],["$","meta","4",{"name":"keywords","content":"javascript,programming,coding-tips,javascript,variables,var,let,const,programming,blog,tutorial,febryan portfolio"}],["$","meta","5",{"name":"creator","content":"Febryan Ramadhan"}],["$","meta","6",{"name":"publisher","content":"Febryan Portfolio"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","9",{"name":"category","content":"Programming"}],["$","meta","10",{"name":"twitter:domain","content":"pepryan.github.io"}],["$","meta","11",{"name":"twitter:url","content":"https://pepryan.github.io/portfolio/blog/javascript-variables"}],["$","meta","12",{"name":"theme-color","content":"#000000"}],["$","meta","13",{"name":"msapplication-TileColor","content":"#000000"}],["$","meta","14",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","15",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","16",{"name":"format-detection","content":"telephone=no"}],["$","meta","17",{"name":"application/ld+json","content":"{\"@context\":\"https://schema.org\",\"@type\":\"Person\",\"@id\":\"https://pepryan.github.io/portfolio/#person\",\"name\":\"Febryan Ramadhan\",\"url\":\"https://pepryan.github.io/portfolio\",\"image\":{\"@type\":\"ImageObject\",\"url\":\"https://pepryan.github.io/portfolio/images/default-og-image.png\",\"width\":1200,\"height\":630},\"description\":\"Cloud Engineer specializing in DevOps, Infrastructure, and Automation\",\"jobTitle\":\"Cloud Engineer & DevOps Specialist\",\"worksFor\":{\"@type\":\"Organization\",\"name\":\"Technology Industry\"},\"knowsAbout\":[\"Cloud Computing\",\"DevOps\",\"Infrastructure as Code\",\"Automation\",\"Web Development\",\"JavaScript\",\"React\",\"Next.js\"],\"sameAs\":[\"https://github.com/pepryan\",\"https://twitter.com/pepryan\"]}"}],["$","meta","18",{"name":"article:author","content":"Febryan Ramadhan"}],["$","meta","19",{"name":"article:published_time","content":"2024-12-13"}],["$","meta","20",{"name":"article:modified_time","content":"2024-12-13"}],["$","meta","21",{"name":"article:section","content":"Programming"}],["$","meta","22",{"name":"article:tag","content":"javascript, programming, coding-tips"}],["$","meta","23",{"name":"difficulty","content":"Beginner"}],["$","meta","24",{"name":"reading-time","content":"6 minutes"}],["$","meta","25",{"name":"og:image:width","content":"1200"}],["$","meta","26",{"name":"og:image:height","content":"630"}],["$","meta","27",{"name":"og:image:type","content":"image/png"}],["$","link","28",{"rel":"canonical","href":"https://pepryan.github.io/portfolio/blog/javascript-variables/"}],["$","meta","29",{"property":"og:title","content":"JavaScript Variables: var, let, dan const"}],["$","meta","30",{"property":"og:description","content":"Pelajari perbedaan antara var, let, dan const di JavaScript untuk kode yang lebih aman dan modern."}],["$","meta","31",{"property":"og:url","content":"https://pepryan.github.io/portfolio/blog/javascript-variables/"}],["$","meta","32",{"property":"og:site_name","content":"Febryan Portfolio"}],["$","meta","33",{"property":"og:locale","content":"id_ID"}],["$","meta","34",{"property":"og:image","content":"https://pepryan.github.io/portfolio/images/default-og-image.png"}],["$","meta","35",{"property":"og:image:width","content":"1200"}],["$","meta","36",{"property":"og:image:height","content":"630"}],["$","meta","37",{"property":"og:image:alt","content":"JavaScript Variables: var, let, dan const"}],["$","meta","38",{"property":"og:type","content":"article"}],["$","meta","39",{"property":"article:published_time","content":"2024-12-13"}],["$","meta","40",{"property":"article:modified_time","content":"2024-12-13"}],["$","meta","41",{"property":"article:author","content":"Febryan Ramadhan"}],["$","meta","42",{"property":"article:tag","content":"javascript"}],["$","meta","43",{"property":"article:tag","content":"programming"}],["$","meta","44",{"property":"article:tag","content":"coding-tips"}],["$","meta","45",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","46",{"name":"twitter:site","content":"@pepryan"}],["$","meta","47",{"name":"twitter:creator","content":"@pepryan"}],["$","meta","48",{"name":"twitter:title","content":"JavaScript Variables: var, let, dan const"}],["$","meta","49",{"name":"twitter:description","content":"Pelajari perbedaan antara var, let, dan const di JavaScript untuk kode yang lebih aman dan modern."}],["$","meta","50",{"name":"twitter:image","content":"https://pepryan.github.io/portfolio/images/default-og-image.png"}],["$","link","51",{"rel":"icon","href":"/portfolio/favicon.ico","type":"image/x-icon","sizes":"32x32"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
16:I[9546,["844","static/chunks/ee560e2c-464c506caba219a9.js","446","static/chunks/53c13509-a7b9549d354fe68a.js","995","static/chunks/995-3c65e67e129e1284.js","652","static/chunks/652-ffb5d26f95dc10dc.js","766","static/chunks/766-17e6dbb83760c286.js","597","static/chunks/597-53a3d37dc4ea2b64.js","953","static/chunks/app/blog/%5Bslug%5D/page-f04594716a033b59.js"],"default",1]
15:T4d4,{"@context":"https://schema.org","@type":"BlogPosting","@id":"https://pepryan.github.io/portfolio/blog/javascript-variables#article","headline":"Var, Let, dan Const: Rahasia Penting yang Wajib Dipahami Developer!","description":"Pelajari perbedaan antara var, let, dan const di JavaScript serta kenapa kamu harus mulai menggunakan let dan const untuk kode yang lebih aman dan modern!","image":{"@type":"ImageObject","url":"https://pepryan.github.io/portfolio/images/default-og-image.png","width":1200,"height":630},"author":{"@type":"Person","name":"Febryan Ramadhan","url":"https://pepryan.github.io/portfolio"},"publisher":{"@type":"Organization","name":"Febryan Portfolio","logo":{"@type":"ImageObject","url":"https://pepryan.github.io/portfolio/images/default-og-image.png","width":1200,"height":630}},"datePublished":"2024-12-13","dateModified":"2024-12-13","mainEntityOfPage":{"@type":"WebPage","@id":"https://pepryan.github.io/portfolio/blog/javascript-variables"},"url":"https://pepryan.github.io/portfolio/blog/javascript-variables","keywords":"javascript, programming, coding-tips, javascript, variables, var, let, const, programming","articleSection":"Programming","wordCount":1099,"timeRequired":"PT6M","inLanguage":"id-ID"}17:T11d1d,"use strict";
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = {
    blockquote: "blockquote",
    code: "code",
    em: "em",
    figure: "figure",
    h1: "h1",
    h2: "h2",
    h3: "h3",
    hr: "hr",
    li: "li",
    ol: "ol",
    p: "p",
    pre: "pre",
    span: "span",
    strong: "strong",
    table: "table",
    tbody: "tbody",
    td: "td",
    th: "th",
    thead: "thead",
    tr: "tr",
    ul: "ul",
    ..._provideComponents(),
    ...props.components
  };
  return _jsxs(_Fragment, {
    children: [_jsx(_components.p, {
      children: _jsx(_components.strong, {
        children: "Artikel Test. Artikel ini dihasilkan oleh ChatGPT."
      })
    }), "\n", _jsx(_components.h1, {
      children: "Var, Let, dan Const: Rahasia Penting yang Wajib Dipahami Developer!"
    }), "\n", _jsxs(_components.p, {
      children: ["Tahukah kamu bahwa salah memilih cara deklarasi variabel bisa membuat kode kamu menjadi ", _jsx(_components.em, {
        children: "buggy"
      }), " dan sulit dipahami? Di dunia JavaScript, ada tiga cara utama untuk mendeklarasikan variabel: ", _jsx(_components.span, {
        "data-rehype-pretty-code-figure": "",
        children: _jsx(_components.code, {
          "data-language": "plaintext",
          "data-theme": "night-owl",
          style: {
            backgroundColor: "#011627",
            color: "#d6deeb"
          },
          children: _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              children: "var"
            })
          })
        })
      }), ", ", _jsx(_components.span, {
        "data-rehype-pretty-code-figure": "",
        children: _jsx(_components.code, {
          "data-language": "plaintext",
          "data-theme": "night-owl",
          style: {
            backgroundColor: "#011627",
            color: "#d6deeb"
          },
          children: _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              children: "let"
            })
          })
        })
      }), ", dan ", _jsx(_components.span, {
        "data-rehype-pretty-code-figure": "",
        children: _jsx(_components.code, {
          "data-language": "plaintext",
          "data-theme": "night-owl",
          style: {
            backgroundColor: "#011627",
            color: "#d6deeb"
          },
          children: _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              children: "const"
            })
          })
        })
      }), ". Ketiganya sering disalahgunakan oleh banyak developer, bahkan yang sudah berpengalaman sekalipun! Artikel ini akan membongkar perbedaan mendasar ketiga deklarasi ini dengan penjelasan lengkap dan contoh studi kasus."]
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Apa Itu Var, Let, dan Const?"
    }), "\n", _jsx(_components.p, {
      children: "Sebelum masuk ke perbedaan, mari kita kenali satu per satu:"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "var"
                })
              })
            })
          })
        }), ": Cara lama untuk mendeklarasikan variabel. Digunakan sebelum ES6 (2015)."]
      }), "\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "let"
                })
              })
            })
          })
        }), ": Alternatif modern untuk ", _jsx(_components.span, {
          "data-rehype-pretty-code-figure": "",
          children: _jsx(_components.code, {
            "data-language": "plaintext",
            "data-theme": "night-owl",
            style: {
              backgroundColor: "#011627",
              color: "#d6deeb"
            },
            children: _jsx(_components.span, {
              "data-line": "",
              children: _jsx(_components.span, {
                children: "var"
              })
            })
          })
        }), ", dirancang untuk memperbaiki kekurangan ", _jsx(_components.span, {
          "data-rehype-pretty-code-figure": "",
          children: _jsx(_components.code, {
            "data-language": "plaintext",
            "data-theme": "night-owl",
            style: {
              backgroundColor: "#011627",
              color: "#d6deeb"
            },
            children: _jsx(_components.span, {
              "data-line": "",
              children: _jsx(_components.span, {
                children: "var"
              })
            })
          })
        }), "."]
      }), "\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "const"
                })
              })
            })
          })
        }), ": Mirip dengan ", _jsx(_components.span, {
          "data-rehype-pretty-code-figure": "",
          children: _jsx(_components.code, {
            "data-language": "plaintext",
            "data-theme": "night-owl",
            style: {
              backgroundColor: "#011627",
              color: "#d6deeb"
            },
            children: _jsx(_components.span, {
              "data-line": "",
              children: _jsx(_components.span, {
                children: "let"
              })
            })
          })
        }), ", tetapi digunakan untuk nilai yang tidak berubah."]
      }), "\n"]
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Perbedaan Utama (TL;DR)"
    }), "\n", _jsxs(_components.table, {
      children: [_jsx(_components.thead, {
        children: _jsxs(_components.tr, {
          children: [_jsx(_components.th, {
            children: _jsx(_components.strong, {
              children: "Aspek"
            })
          }), _jsx(_components.th, {
            children: _jsx(_components.strong, {
              children: "var"
            })
          }), _jsx(_components.th, {
            children: _jsx(_components.strong, {
              children: "let"
            })
          }), _jsx(_components.th, {
            children: _jsx(_components.strong, {
              children: "const"
            })
          })]
        })
      }), _jsxs(_components.tbody, {
        children: [_jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: _jsx(_components.strong, {
              children: "Scope"
            })
          }), _jsx(_components.td, {
            children: "Function scope"
          }), _jsx(_components.td, {
            children: "Block scope"
          }), _jsx(_components.td, {
            children: "Block scope"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: _jsx(_components.strong, {
              children: "Redeclaration"
            })
          }), _jsx(_components.td, {
            children: "Bisa"
          }), _jsx(_components.td, {
            children: "Tidak bisa"
          }), _jsx(_components.td, {
            children: "Tidak bisa"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: _jsx(_components.strong, {
              children: "Reassignment"
            })
          }), _jsx(_components.td, {
            children: "Bisa"
          }), _jsx(_components.td, {
            children: "Bisa"
          }), _jsx(_components.td, {
            children: "Tidak bisa"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: _jsx(_components.strong, {
              children: "Hoisting"
            })
          }), _jsxs(_components.td, {
            children: ["Diangkat dengan nilai ", _jsx(_components.span, {
              "data-rehype-pretty-code-figure": "",
              children: _jsx(_components.code, {
                "data-language": "plaintext",
                "data-theme": "night-owl",
                style: {
                  backgroundColor: "#011627",
                  color: "#d6deeb"
                },
                children: _jsx(_components.span, {
                  "data-line": "",
                  children: _jsx(_components.span, {
                    children: "undefined"
                  })
                })
              })
            })]
          }), _jsx(_components.td, {
            children: "Diangkat tetapi tidak bisa digunakan sebelum deklarasi"
          }), _jsx(_components.td, {
            children: "Diangkat tetapi tidak bisa digunakan sebelum deklarasi"
          })]
        }), _jsxs(_components.tr, {
          children: [_jsx(_components.td, {
            children: _jsx(_components.strong, {
              children: "Nilai Harus Diisi?"
            })
          }), _jsx(_components.td, {
            children: "Tidak"
          }), _jsx(_components.td, {
            children: "Tidak"
          }), _jsx(_components.td, {
            children: "Ya"
          })]
        })]
      })]
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Perbedaan Detail dengan Contoh"
    }), "\n", _jsx(_components.h3, {
      children: "1. Scope (Ruang Lingkup)"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "var"
                })
              })
            })
          })
        }), " hanya berlaku di dalam fungsi tempat ia dideklarasikan (function scope)."]
      }), "\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "let"
                })
              })
            })
          })
        }), " dan ", _jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "const"
                })
              })
            })
          })
        }), " hanya berlaku di dalam blok tempat mereka dideklarasikan (block scope)."]
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.strong, {
        children: "Contoh:"
      })
    }), "\n", _jsx(_components.figure, {
      "data-rehype-pretty-code-figure": "",
      children: _jsx(_components.pre, {
        style: {
          backgroundColor: "#011627",
          color: "#d6deeb"
        },
        tabIndex: "0",
        "data-language": "javascript",
        "data-theme": "night-owl",
        children: _jsxs(_components.code, {
          "data-line-numbers": "",
          "data-language": "javascript",
          "data-theme": "night-owl",
          style: {
            display: "grid"
          },
          "data-line-numbers-max-digits": "1",
          children: [_jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "if"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: " ("
            }), _jsx(_components.span, {
              style: {
                color: "#FF5874"
              },
              children: "true"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ") {"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "    var"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " x"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 10"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "    let"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " y"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 20"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "    const"
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: " z"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 30"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "}"
            })
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#7FDBCA",
                fontStyle: "italic"
              },
              children: "console"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "."
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "log"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "x"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "); "
            }), _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// 10 (bisa diakses di luar blok if)"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#7FDBCA",
                fontStyle: "italic"
              },
              children: "console"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "."
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "log"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "y"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "); "
            }), _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// Error! y tidak dikenal di luar blok if"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#7FDBCA",
                fontStyle: "italic"
              },
              children: "console"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "."
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "log"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "z"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "); "
            }), _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// Error! z tidak dikenal di luar blok if"
            })]
          })]
        })
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h3, {
      children: "2. Redeclaration (Deklarasi Ulang)"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "var"
                })
              })
            })
          })
        }), ": Bisa dideklarasikan ulang tanpa masalah (potensi konflik)."]
      }), "\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "let"
                })
              })
            })
          })
        }), " dan ", _jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "const"
                })
              })
            })
          })
        }), ": Tidak bisa dideklarasikan ulang di tempat yang sama (lebih aman)."]
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.strong, {
        children: "Contoh:"
      })
    }), "\n", _jsx(_components.figure, {
      "data-rehype-pretty-code-figure": "",
      children: _jsx(_components.pre, {
        style: {
          backgroundColor: "#011627",
          color: "#d6deeb"
        },
        tabIndex: "0",
        "data-language": "javascript",
        "data-theme": "night-owl",
        children: _jsxs(_components.code, {
          "data-language": "javascript",
          "data-theme": "night-owl",
          style: {
            display: "grid"
          },
          children: [_jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "var"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " a"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 1"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "var"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " a"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 2"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "; "
            }), _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// Tidak masalah (tetapi bisa membingungkan)."
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: " "
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "let"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " b"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 1"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// let b = 2; // Error! Tidak bisa dideklarasikan ulang."
            })
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: " "
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "const"
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: " c"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 1"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// const c = 2; // Error! Tidak bisa dideklarasikan ulang."
            })
          })]
        })
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h3, {
      children: "3. Reassignment (Mengubah Nilai)"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: [_jsxs(_components.strong, {
          children: [_jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "var"
                })
              })
            })
          }), " dan ", _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "let"
                })
              })
            })
          })]
        }), ": Nilainya bisa diubah setelah dideklarasikan."]
      }), "\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "const"
                })
              })
            })
          })
        }), ": Nilainya tidak bisa diubah."]
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.strong, {
        children: "Contoh:"
      })
    }), "\n", _jsx(_components.figure, {
      "data-rehype-pretty-code-figure": "",
      children: _jsx(_components.pre, {
        style: {
          backgroundColor: "#011627",
          color: "#d6deeb"
        },
        tabIndex: "0",
        "data-language": "javascript",
        "data-theme": "night-owl",
        children: _jsxs(_components.code, {
          "data-language": "javascript",
          "data-theme": "night-owl",
          style: {
            display: "grid"
          },
          children: [_jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "let"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " name"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: " \""
            }), _jsx(_components.span, {
              style: {
                color: "#ECC48D"
              },
              children: "Ryan"
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: "\""
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "name"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: " \""
            }), _jsx(_components.span, {
              style: {
                color: "#ECC48D"
              },
              children: "Febryan"
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: "\""
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "; "
            }), _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// Oke, nilai diubah."
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: " "
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "const"
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: " age"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 25"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// age = 26; // Error! Nilai tidak bisa diubah."
            })
          })]
        })
      })
    }), "\n", _jsxs(_components.blockquote, {
      children: ["\n", _jsxs(_components.p, {
        children: [_jsx(_components.strong, {
          children: "Catatan Penting"
        }), ": Untuk objek dan array, ", _jsx(_components.span, {
          "data-rehype-pretty-code-figure": "",
          children: _jsx(_components.code, {
            "data-language": "plaintext",
            "data-theme": "night-owl",
            style: {
              backgroundColor: "#011627",
              color: "#d6deeb"
            },
            children: _jsx(_components.span, {
              "data-line": "",
              children: _jsx(_components.span, {
                children: "const"
              })
            })
          })
        }), " mengunci referensi, tetapi isi dalamnya tetap bisa diubah."]
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.strong, {
        children: "Contoh:"
      })
    }), "\n", _jsx(_components.figure, {
      "data-rehype-pretty-code-figure": "",
      children: _jsx(_components.pre, {
        style: {
          backgroundColor: "#011627",
          color: "#d6deeb"
        },
        tabIndex: "0",
        "data-language": "javascript",
        "data-theme": "night-owl",
        children: _jsxs(_components.code, {
          "data-language": "javascript",
          "data-theme": "night-owl",
          style: {
            display: "grid"
          },
          children: [_jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "const"
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: " user"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " {"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: " name"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: ":"
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: " \""
            }), _jsx(_components.span, {
              style: {
                color: "#ECC48D"
              },
              children: "Ryan"
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: "\""
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: ","
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: " age"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: ":"
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 25"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " }"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#7FDBCA",
                fontStyle: "italic"
              },
              children: "user"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "."
            }), _jsx(_components.span, {
              style: {
                color: "#BAEBE2"
              },
              children: "name"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: " \""
            }), _jsx(_components.span, {
              style: {
                color: "#ECC48D"
              },
              children: "Febryan"
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: "\""
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "; "
            }), _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// Oke, mengubah properti."
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: " "
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// Tapi:"
            })
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// user = { name: \"Uwi\", age: 23 }; // Error! Tidak bisa mengganti objek."
            })
          })]
        })
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h3, {
      children: "4. Hoisting (Pengangkatan)"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "var"
                })
              })
            })
          })
        }), ": Diangkat ke atas (hoisted) dengan nilai awal ", _jsx(_components.span, {
          "data-rehype-pretty-code-figure": "",
          children: _jsx(_components.code, {
            "data-language": "plaintext",
            "data-theme": "night-owl",
            style: {
              backgroundColor: "#011627",
              color: "#d6deeb"
            },
            children: _jsx(_components.span, {
              "data-line": "",
              children: _jsx(_components.span, {
                children: "undefined"
              })
            })
          })
        }), "."]
      }), "\n", _jsxs(_components.li, {
        children: [_jsxs(_components.strong, {
          children: [_jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "let"
                })
              })
            })
          }), " dan ", _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "const"
                })
              })
            })
          })]
        }), ": Diangkat tetapi tidak bisa digunakan sebelum dideklarasikan (temporal dead zone)."]
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.strong, {
        children: "Contoh:"
      })
    }), "\n", _jsx(_components.figure, {
      "data-rehype-pretty-code-figure": "",
      children: _jsx(_components.pre, {
        style: {
          backgroundColor: "#011627",
          color: "#d6deeb"
        },
        tabIndex: "0",
        "data-language": "javascript",
        "data-theme": "night-owl",
        children: _jsxs(_components.code, {
          "data-language": "javascript",
          "data-theme": "night-owl",
          style: {
            display: "grid"
          },
          children: [_jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#7FDBCA",
                fontStyle: "italic"
              },
              children: "console"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "."
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "log"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "a"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "); "
            }), _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// undefined (var diangkat ke atas tetapi belum diisi nilai)"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "var"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " a"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 5"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: " "
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// console.log(b); // Error! b tidak bisa digunakan sebelum deklarasi."
            })
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "let"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " b"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 10"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          })]
        })
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Kapan Harus Menggunakan Let atau Const?"
    }), "\n", _jsxs(_components.ol, {
      children: ["\n", _jsxs(_components.li, {
        children: ["\n", _jsx(_components.p, {
          children: _jsxs(_components.strong, {
            children: ["Gunakan ", _jsx(_components.span, {
              "data-rehype-pretty-code-figure": "",
              children: _jsx(_components.code, {
                "data-language": "plaintext",
                "data-theme": "night-owl",
                style: {
                  backgroundColor: "#011627",
                  color: "#d6deeb"
                },
                children: _jsx(_components.span, {
                  "data-line": "",
                  children: _jsx(_components.span, {
                    children: "const"
                  })
                })
              })
            }), " Sebisa Mungkin"]
          })
        }), "\n", _jsxs(_components.ul, {
          children: ["\n", _jsxs(_components.li, {
            children: ["Jika nilai variabel tidak akan berubah, selalu gunakan ", _jsx(_components.span, {
              "data-rehype-pretty-code-figure": "",
              children: _jsx(_components.code, {
                "data-language": "plaintext",
                "data-theme": "night-owl",
                style: {
                  backgroundColor: "#011627",
                  color: "#d6deeb"
                },
                children: _jsx(_components.span, {
                  "data-line": "",
                  children: _jsx(_components.span, {
                    children: "const"
                  })
                })
              })
            }), "."]
          }), "\n"]
        }), "\n"]
      }), "\n", _jsxs(_components.li, {
        children: ["\n", _jsx(_components.p, {
          children: _jsxs(_components.strong, {
            children: ["Gunakan ", _jsx(_components.span, {
              "data-rehype-pretty-code-figure": "",
              children: _jsx(_components.code, {
                "data-language": "plaintext",
                "data-theme": "night-owl",
                style: {
                  backgroundColor: "#011627",
                  color: "#d6deeb"
                },
                children: _jsx(_components.span, {
                  "data-line": "",
                  children: _jsx(_components.span, {
                    children: "let"
                  })
                })
              })
            }), " Jika Nilai Akan Berubah"]
          })
        }), "\n", _jsxs(_components.ul, {
          children: ["\n", _jsx(_components.li, {
            children: "Misalnya untuk nilai yang diperbarui dalam perulangan atau kondisi tertentu."
          }), "\n"]
        }), "\n"]
      }), "\n", _jsxs(_components.li, {
        children: ["\n", _jsx(_components.p, {
          children: _jsxs(_components.strong, {
            children: ["Hindari ", _jsx(_components.span, {
              "data-rehype-pretty-code-figure": "",
              children: _jsx(_components.code, {
                "data-language": "plaintext",
                "data-theme": "night-owl",
                style: {
                  backgroundColor: "#011627",
                  color: "#d6deeb"
                },
                children: _jsx(_components.span, {
                  "data-line": "",
                  children: _jsx(_components.span, {
                    children: "var"
                  })
                })
              })
            })]
          })
        }), "\n", _jsxs(_components.ul, {
          children: ["\n", _jsxs(_components.li, {
            children: [_jsx(_components.span, {
              "data-rehype-pretty-code-figure": "",
              children: _jsx(_components.code, {
                "data-language": "plaintext",
                "data-theme": "night-owl",
                style: {
                  backgroundColor: "#011627",
                  color: "#d6deeb"
                },
                children: _jsx(_components.span, {
                  "data-line": "",
                  children: _jsx(_components.span, {
                    children: "var"
                  })
                })
              })
            }), " hanya digunakan jika kamu bekerja dengan kode lama atau benar-benar perlu akses global dalam fungsi."]
          }), "\n"]
        }), "\n"]
      }), "\n"]
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Studi Kasus untuk Memperjelas"
    }), "\n", _jsx(_components.h3, {
      children: "Studi Kasus 1: Perulangan"
    }), "\n", _jsxs(_components.p, {
      children: ["Gunakan ", _jsx(_components.span, {
        "data-rehype-pretty-code-figure": "",
        children: _jsx(_components.code, {
          "data-language": "plaintext",
          "data-theme": "night-owl",
          style: {
            backgroundColor: "#011627",
            color: "#d6deeb"
          },
          children: _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              children: "let"
            })
          })
        })
      }), " agar setiap iterasi memiliki \"kotak\" sendiri."]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.strong, {
        children: "Contoh:"
      })
    }), "\n", _jsx(_components.figure, {
      "data-rehype-pretty-code-figure": "",
      children: _jsx(_components.pre, {
        style: {
          backgroundColor: "#011627",
          color: "#d6deeb"
        },
        tabIndex: "0",
        "data-language": "javascript",
        "data-theme": "night-owl",
        children: _jsxs(_components.code, {
          "data-language": "javascript",
          "data-theme": "night-owl",
          style: {
            display: "grid"
          },
          children: [_jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "for"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: " ("
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "let"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " i"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 0"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "; "
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "i"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " <"
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 3"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "; "
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "i"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "++"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ") {"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "    setTimeout"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: "()"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " =>"
            }), _jsx(_components.span, {
              style: {
                color: "#7FDBCA",
                fontStyle: "italic"
              },
              children: " console"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "."
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "log"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "i"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "), "
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: "100"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ");"
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "}"
            })
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// Output: 0, 1, 2"
            })
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: " "
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "for"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: " ("
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "var"
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: " i"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 0"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "; "
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "i"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " <"
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 3"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "; "
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "i"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "++"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ") {"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "    setTimeout"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: "()"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " =>"
            }), _jsx(_components.span, {
              style: {
                color: "#7FDBCA",
                fontStyle: "italic"
              },
              children: " console"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "."
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "log"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D7DBE0"
              },
              children: "i"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "), "
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: "100"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ");"
            })]
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "}"
            })
          }), "\n", _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              style: {
                color: "#637777",
                fontStyle: "italic"
              },
              children: "// Output: 3, 3, 3 (semua iterasi berbagi \"kotak\" yang sama)"
            })
          })]
        })
      })
    }), "\n", _jsx(_components.h3, {
      children: "Studi Kasus 2: Konfigurasi Aplikasi"
    }), "\n", _jsxs(_components.p, {
      children: ["Gunakan ", _jsx(_components.span, {
        "data-rehype-pretty-code-figure": "",
        children: _jsx(_components.code, {
          "data-language": "plaintext",
          "data-theme": "night-owl",
          style: {
            backgroundColor: "#011627",
            color: "#d6deeb"
          },
          children: _jsx(_components.span, {
            "data-line": "",
            children: _jsx(_components.span, {
              children: "const"
            })
          })
        })
      }), " untuk nilai yang tidak akan berubah."]
    }), "\n", _jsx(_components.p, {
      children: _jsx(_components.strong, {
        children: "Contoh:"
      })
    }), "\n", _jsx(_components.figure, {
      "data-rehype-pretty-code-figure": "",
      children: _jsx(_components.pre, {
        style: {
          backgroundColor: "#011627",
          color: "#d6deeb"
        },
        tabIndex: "0",
        "data-language": "javascript",
        "data-theme": "night-owl",
        children: _jsxs(_components.code, {
          "data-language": "javascript",
          "data-theme": "night-owl",
          style: {
            display: "grid"
          },
          children: [_jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "const"
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: " APP_NAME"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: " \""
            }), _jsx(_components.span, {
              style: {
                color: "#ECC48D"
              },
              children: "CoolApp"
            }), _jsx(_components.span, {
              style: {
                color: "#D9F5DD"
              },
              children: "\""
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: "const"
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: " MAX_USERS"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA"
              },
              children: " ="
            }), _jsx(_components.span, {
              style: {
                color: "#F78C6C"
              },
              children: " 100"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ";"
            })]
          }), "\n", _jsxs(_components.span, {
            "data-line": "",
            children: [_jsx(_components.span, {
              style: {
                color: "#7FDBCA",
                fontStyle: "italic"
              },
              children: "console"
            }), _jsx(_components.span, {
              style: {
                color: "#C792EA",
                fontStyle: "italic"
              },
              children: "."
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF",
                fontStyle: "italic"
              },
              children: "log"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "("
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "`"
            }), _jsx(_components.span, {
              style: {
                color: "#D3423E"
              },
              children: "${"
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF"
              },
              children: "APP_NAME"
            }), _jsx(_components.span, {
              style: {
                color: "#D3423E"
              },
              children: "}"
            }), _jsx(_components.span, {
              style: {
                color: "#ECC48D"
              },
              children: " allows up to "
            }), _jsx(_components.span, {
              style: {
                color: "#D3423E"
              },
              children: "${"
            }), _jsx(_components.span, {
              style: {
                color: "#82AAFF"
              },
              children: "MAX_USERS"
            }), _jsx(_components.span, {
              style: {
                color: "#D3423E"
              },
              children: "}"
            }), _jsx(_components.span, {
              style: {
                color: "#ECC48D"
              },
              children: " users."
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: "`"
            }), _jsx(_components.span, {
              style: {
                color: "#D6DEEB"
              },
              children: ");"
            })]
          })]
        })
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Kesimpulan"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "const"
                })
              })
            })
          })
        }), ": Gunakan untuk nilai yang tidak berubah. Aman dan mudah dimengerti."]
      }), "\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "let"
                })
              })
            })
          })
        }), ": Gunakan untuk nilai yang bisa berubah. Ideal untuk perulangan atau kondisi."]
      }), "\n", _jsxs(_components.li, {
        children: [_jsx(_components.strong, {
          children: _jsx(_components.span, {
            "data-rehype-pretty-code-figure": "",
            children: _jsx(_components.code, {
              "data-language": "plaintext",
              "data-theme": "night-owl",
              style: {
                backgroundColor: "#011627",
                color: "#d6deeb"
              },
              children: _jsx(_components.span, {
                "data-line": "",
                children: _jsx(_components.span, {
                  children: "var"
                })
              })
            })
          })
        }), ": Hindari jika memungkinkan. Gunakan hanya untuk kompatibilitas kode lama."]
      }), "\n"]
    }), "\n", _jsxs(_components.blockquote, {
      children: ["\n", _jsxs(_components.p, {
        children: [_jsx(_components.strong, {
          children: "Tips Penting"
        }), ": Jika ragu, mulai dengan ", _jsx(_components.span, {
          "data-rehype-pretty-code-figure": "",
          children: _jsx(_components.code, {
            "data-language": "plaintext",
            "data-theme": "night-owl",
            style: {
              backgroundColor: "#011627",
              color: "#d6deeb"
            },
            children: _jsx(_components.span, {
              "data-line": "",
              children: _jsx(_components.span, {
                children: "const"
              })
            })
          })
        }), ". Jika ternyata nilai perlu berubah, ubah ke ", _jsx(_components.span, {
          "data-rehype-pretty-code-figure": "",
          children: _jsx(_components.code, {
            "data-language": "plaintext",
            "data-theme": "night-owl",
            style: {
              backgroundColor: "#011627",
              color: "#d6deeb"
            },
            children: _jsx(_components.span, {
              "data-line": "",
              children: _jsx(_components.span, {
                children: "let"
              })
            })
          })
        }), ". Dengan begitu, kamu akan terhindar dari bug yang sulit dilacak."]
      }), "\n"]
    }), "\n", _jsx(_components.p, {
      children: "Sudah paham perbedaannya? Mulai sekarang, buat kode JavaScript-mu lebih aman dan mudah dibaca dengan memilih deklarasi variabel yang tepat!"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = {
    ..._provideComponents(),
    ...props.components
  };
  return MDXLayout ? _jsx(MDXLayout, {
    ...props,
    children: _jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
return {
  default: MDXContent
};
18:T15d4,
**Artikel Test. Artikel ini dihasilkan oleh ChatGPT.**

# Var, Let, dan Const: Rahasia Penting yang Wajib Dipahami Developer!

Tahukah kamu bahwa salah memilih cara deklarasi variabel bisa membuat kode kamu menjadi *buggy* dan sulit dipahami? Di dunia JavaScript, ada tiga cara utama untuk mendeklarasikan variabel: `var`, `let`, dan `const`. Ketiganya sering disalahgunakan oleh banyak developer, bahkan yang sudah berpengalaman sekalipun! Artikel ini akan membongkar perbedaan mendasar ketiga deklarasi ini dengan penjelasan lengkap dan contoh studi kasus.

---

## Apa Itu Var, Let, dan Const?

Sebelum masuk ke perbedaan, mari kita kenali satu per satu:

- **`var`**: Cara lama untuk mendeklarasikan variabel. Digunakan sebelum ES6 (2015).
- **`let`**: Alternatif modern untuk `var`, dirancang untuk memperbaiki kekurangan `var`.
- **`const`**: Mirip dengan `let`, tetapi digunakan untuk nilai yang tidak berubah.

---

## Perbedaan Utama (TL;DR)

| **Aspek**           | **var**                           | **let**                          | **const**                          |
|---------------------|-----------------------------------|-----------------------------------|------------------------------------|
| **Scope**           | Function scope                   | Block scope                      | Block scope                       |
| **Redeclaration**   | Bisa                             | Tidak bisa                       | Tidak bisa                        |
| **Reassignment**    | Bisa                             | Bisa                             | Tidak bisa                        |
| **Hoisting**        | Diangkat dengan nilai `undefined` | Diangkat tetapi tidak bisa digunakan sebelum deklarasi | Diangkat tetapi tidak bisa digunakan sebelum deklarasi |
| **Nilai Harus Diisi?** | Tidak                           | Tidak                            | Ya                                |

---

## Perbedaan Detail dengan Contoh

### 1. Scope (Ruang Lingkup)

- **`var`** hanya berlaku di dalam fungsi tempat ia dideklarasikan (function scope).
- **`let`** dan **`const`** hanya berlaku di dalam blok tempat mereka dideklarasikan (block scope).

**Contoh:**
```javascript showLineNumbers
if (true) {
    var x = 10;
    let y = 20;
    const z = 30;
}
console.log(x); // 10 (bisa diakses di luar blok if)
console.log(y); // Error! y tidak dikenal di luar blok if
console.log(z); // Error! z tidak dikenal di luar blok if
```

---

### 2. Redeclaration (Deklarasi Ulang)

- **`var`**: Bisa dideklarasikan ulang tanpa masalah (potensi konflik).
- **`let`** dan **`const`**: Tidak bisa dideklarasikan ulang di tempat yang sama (lebih aman).

**Contoh:**
```javascript
var a = 1;
var a = 2; // Tidak masalah (tetapi bisa membingungkan).

let b = 1;
// let b = 2; // Error! Tidak bisa dideklarasikan ulang.

const c = 1;
// const c = 2; // Error! Tidak bisa dideklarasikan ulang.
```

---

### 3. Reassignment (Mengubah Nilai)

- **`var` dan `let`**: Nilainya bisa diubah setelah dideklarasikan.
- **`const`**: Nilainya tidak bisa diubah.

**Contoh:**
```javascript
let name = "Ryan";
name = "Febryan"; // Oke, nilai diubah.

const age = 25;
// age = 26; // Error! Nilai tidak bisa diubah.
```

> **Catatan Penting**: Untuk objek dan array, `const` mengunci referensi, tetapi isi dalamnya tetap bisa diubah.

**Contoh:**
```javascript
const user = { name: "Ryan", age: 25 };
user.name = "Febryan"; // Oke, mengubah properti.

// Tapi:
// user = { name: "Uwi", age: 23 }; // Error! Tidak bisa mengganti objek.
```

---

### 4. Hoisting (Pengangkatan)

- **`var`**: Diangkat ke atas (hoisted) dengan nilai awal `undefined`.
- **`let` dan `const`**: Diangkat tetapi tidak bisa digunakan sebelum dideklarasikan (temporal dead zone).

**Contoh:**
```javascript
console.log(a); // undefined (var diangkat ke atas tetapi belum diisi nilai)
var a = 5;

// console.log(b); // Error! b tidak bisa digunakan sebelum deklarasi.
let b = 10;
```

---

## Kapan Harus Menggunakan Let atau Const?

1. **Gunakan `const` Sebisa Mungkin**
   - Jika nilai variabel tidak akan berubah, selalu gunakan `const`.

2. **Gunakan `let` Jika Nilai Akan Berubah**
   - Misalnya untuk nilai yang diperbarui dalam perulangan atau kondisi tertentu.

3. **Hindari `var`**
   - `var` hanya digunakan jika kamu bekerja dengan kode lama atau benar-benar perlu akses global dalam fungsi.

---

## Studi Kasus untuk Memperjelas

### Studi Kasus 1: Perulangan
Gunakan `let` agar setiap iterasi memiliki "kotak" sendiri.

**Contoh:**
```javascript
for (let i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 100);
}
// Output: 0, 1, 2

for (var i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 100);
}
// Output: 3, 3, 3 (semua iterasi berbagi "kotak" yang sama)
```

### Studi Kasus 2: Konfigurasi Aplikasi
Gunakan `const` untuk nilai yang tidak akan berubah.

**Contoh:**
```javascript
const APP_NAME = "CoolApp";
const MAX_USERS = 100;
console.log(`${APP_NAME} allows up to ${MAX_USERS} users.`);
```

---

## Kesimpulan

- **`const`**: Gunakan untuk nilai yang tidak berubah. Aman dan mudah dimengerti.
- **`let`**: Gunakan untuk nilai yang bisa berubah. Ideal untuk perulangan atau kondisi.
- **`var`**: Hindari jika memungkinkan. Gunakan hanya untuk kompatibilitas kode lama.

> **Tips Penting**: Jika ragu, mulai dengan `const`. Jika ternyata nilai perlu berubah, ubah ke `let`. Dengan begitu, kamu akan terhindar dari bug yang sulit dilacak.

Sudah paham perbedaannya? Mulai sekarang, buat kode JavaScript-mu lebih aman dan mudah dibaca dengan memilih deklarasi variabel yang tepat!

19:T15d4,
**Artikel Test. Artikel ini dihasilkan oleh ChatGPT.**

# Var, Let, dan Const: Rahasia Penting yang Wajib Dipahami Developer!

Tahukah kamu bahwa salah memilih cara deklarasi variabel bisa membuat kode kamu menjadi *buggy* dan sulit dipahami? Di dunia JavaScript, ada tiga cara utama untuk mendeklarasikan variabel: `var`, `let`, dan `const`. Ketiganya sering disalahgunakan oleh banyak developer, bahkan yang sudah berpengalaman sekalipun! Artikel ini akan membongkar perbedaan mendasar ketiga deklarasi ini dengan penjelasan lengkap dan contoh studi kasus.

---

## Apa Itu Var, Let, dan Const?

Sebelum masuk ke perbedaan, mari kita kenali satu per satu:

- **`var`**: Cara lama untuk mendeklarasikan variabel. Digunakan sebelum ES6 (2015).
- **`let`**: Alternatif modern untuk `var`, dirancang untuk memperbaiki kekurangan `var`.
- **`const`**: Mirip dengan `let`, tetapi digunakan untuk nilai yang tidak berubah.

---

## Perbedaan Utama (TL;DR)

| **Aspek**           | **var**                           | **let**                          | **const**                          |
|---------------------|-----------------------------------|-----------------------------------|------------------------------------|
| **Scope**           | Function scope                   | Block scope                      | Block scope                       |
| **Redeclaration**   | Bisa                             | Tidak bisa                       | Tidak bisa                        |
| **Reassignment**    | Bisa                             | Bisa                             | Tidak bisa                        |
| **Hoisting**        | Diangkat dengan nilai `undefined` | Diangkat tetapi tidak bisa digunakan sebelum deklarasi | Diangkat tetapi tidak bisa digunakan sebelum deklarasi |
| **Nilai Harus Diisi?** | Tidak                           | Tidak                            | Ya                                |

---

## Perbedaan Detail dengan Contoh

### 1. Scope (Ruang Lingkup)

- **`var`** hanya berlaku di dalam fungsi tempat ia dideklarasikan (function scope).
- **`let`** dan **`const`** hanya berlaku di dalam blok tempat mereka dideklarasikan (block scope).

**Contoh:**
```javascript showLineNumbers
if (true) {
    var x = 10;
    let y = 20;
    const z = 30;
}
console.log(x); // 10 (bisa diakses di luar blok if)
console.log(y); // Error! y tidak dikenal di luar blok if
console.log(z); // Error! z tidak dikenal di luar blok if
```

---

### 2. Redeclaration (Deklarasi Ulang)

- **`var`**: Bisa dideklarasikan ulang tanpa masalah (potensi konflik).
- **`let`** dan **`const`**: Tidak bisa dideklarasikan ulang di tempat yang sama (lebih aman).

**Contoh:**
```javascript
var a = 1;
var a = 2; // Tidak masalah (tetapi bisa membingungkan).

let b = 1;
// let b = 2; // Error! Tidak bisa dideklarasikan ulang.

const c = 1;
// const c = 2; // Error! Tidak bisa dideklarasikan ulang.
```

---

### 3. Reassignment (Mengubah Nilai)

- **`var` dan `let`**: Nilainya bisa diubah setelah dideklarasikan.
- **`const`**: Nilainya tidak bisa diubah.

**Contoh:**
```javascript
let name = "Ryan";
name = "Febryan"; // Oke, nilai diubah.

const age = 25;
// age = 26; // Error! Nilai tidak bisa diubah.
```

> **Catatan Penting**: Untuk objek dan array, `const` mengunci referensi, tetapi isi dalamnya tetap bisa diubah.

**Contoh:**
```javascript
const user = { name: "Ryan", age: 25 };
user.name = "Febryan"; // Oke, mengubah properti.

// Tapi:
// user = { name: "Uwi", age: 23 }; // Error! Tidak bisa mengganti objek.
```

---

### 4. Hoisting (Pengangkatan)

- **`var`**: Diangkat ke atas (hoisted) dengan nilai awal `undefined`.
- **`let` dan `const`**: Diangkat tetapi tidak bisa digunakan sebelum dideklarasikan (temporal dead zone).

**Contoh:**
```javascript
console.log(a); // undefined (var diangkat ke atas tetapi belum diisi nilai)
var a = 5;

// console.log(b); // Error! b tidak bisa digunakan sebelum deklarasi.
let b = 10;
```

---

## Kapan Harus Menggunakan Let atau Const?

1. **Gunakan `const` Sebisa Mungkin**
   - Jika nilai variabel tidak akan berubah, selalu gunakan `const`.

2. **Gunakan `let` Jika Nilai Akan Berubah**
   - Misalnya untuk nilai yang diperbarui dalam perulangan atau kondisi tertentu.

3. **Hindari `var`**
   - `var` hanya digunakan jika kamu bekerja dengan kode lama atau benar-benar perlu akses global dalam fungsi.

---

## Studi Kasus untuk Memperjelas

### Studi Kasus 1: Perulangan
Gunakan `let` agar setiap iterasi memiliki "kotak" sendiri.

**Contoh:**
```javascript
for (let i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 100);
}
// Output: 0, 1, 2

for (var i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 100);
}
// Output: 3, 3, 3 (semua iterasi berbagi "kotak" yang sama)
```

### Studi Kasus 2: Konfigurasi Aplikasi
Gunakan `const` untuk nilai yang tidak akan berubah.

**Contoh:**
```javascript
const APP_NAME = "CoolApp";
const MAX_USERS = 100;
console.log(`${APP_NAME} allows up to ${MAX_USERS} users.`);
```

---

## Kesimpulan

- **`const`**: Gunakan untuk nilai yang tidak berubah. Aman dan mudah dimengerti.
- **`let`**: Gunakan untuk nilai yang bisa berubah. Ideal untuk perulangan atau kondisi.
- **`var`**: Hindari jika memungkinkan. Gunakan hanya untuk kompatibilitas kode lama.

> **Tips Penting**: Jika ragu, mulai dengan `const`. Jika ternyata nilai perlu berubah, ubah ke `let`. Dengan begitu, kamu akan terhindar dari bug yang sulit dilacak.

Sudah paham perbedaannya? Mulai sekarang, buat kode JavaScript-mu lebih aman dan mudah dibaca dengan memilih deklarasi variabel yang tepat!

1a:T3906,
# Bikin Kubernetes Cluster di KVM - From Zero to Hero! 🚀

> **Prerequisites**: Pastikan sudah setup KVM di WSL2 dari [tutorial sebelumnya](https://pepryan.github.io/portfolio/blog/install-kvm-wsl2-virtualization/). Kita bakal build on top of that setup!

Setelah punya homelab KVM yang solid, saatnya naik level ke container orchestration! Di tutorial ini, kita bakal setup **production-ready Kubernetes cluster** dengan:

- **1 Master Node** (Control Plane)
- **2 Worker Nodes** 
- **Calico CNI** untuk networking
- **Containerd** sebagai container runtime

Let's dive in! 💪

---

## 🎯 Architecture Overview

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   k8s-master    │    │  k8s-worker-1   │    │  k8s-worker-2   │
│  192.168.122.11 │    │ 192.168.122.21  │    │ 192.168.122.22  │
│                 │    │                 │    │                 │
│ • API Server    │    │ • Kubelet       │    │ • Kubelet       │
│ • etcd          │    │ • Kube-proxy    │    │ • Kube-proxy    │
│ • Scheduler     │    │ • Containerd    │    │ • Containerd    │
│ • Controller    │    │                 │    │                 │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

**Specs per VM:**
- **Master**: 1 vCPU, 2GB RAM, 20GB Storage
- **Workers**: 1 vCPU, 2GB RAM, 20GB Storage

---

## 🏗️ Step 1: Create VMs dengan Terraform

Mari kita automate VM creation pakai Terraform! Create file `k8s-cluster.tf`:

```hcl
terraform {
  required_providers {
    libvirt = {
      source = "dmacvicar/libvirt"
    }
  }
}

provider "libvirt" {
  uri = "qemu:///system"
}

# Ubuntu 22.04 Base Image
resource "libvirt_volume" "ubuntu_base" {
  name   = "ubuntu-22.04-server-cloudimg-amd64.img"
  pool   = "isos"
  source = "https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img"
  format = "qcow2"
}

# Master Node
resource "libvirt_volume" "k8s_master" {
  name           = "k8s-master.qcow2"
  pool           = "vms"
  base_volume_id = libvirt_volume.ubuntu_base.id
  size           = 21474836480 # 20GB
}

resource "libvirt_domain" "k8s_master" {
  name   = "k8s-master"
  memory = "2048"
  vcpu   = 1

  network_interface {
    network_name   = "net-lab"
    addresses      = ["192.168.100.11"]
    hostname       = "k8s-master"
  }

  disk {
    volume_id = libvirt_volume.k8s_master.id
  }

  console {
    type        = "pty"
    target_port = "0"
    target_type = "serial"
  }

  graphics {
    type        = "spice"
    listen_type = "address"
    autoport    = true
  }
}

# Worker Nodes
resource "libvirt_volume" "k8s_worker" {
  count          = 2
  name           = "k8s-worker-${count.index + 1}.qcow2"
  pool           = "vms"
  base_volume_id = libvirt_volume.ubuntu_base.id
  size           = 21474836480 # 20GB
}

resource "libvirt_domain" "k8s_worker" {
  count  = 2
  name   = "k8s-worker-${count.index + 1}"
  memory = "2048"
  vcpu   = 1

  network_interface {
    network_name   = "net-lab"
    addresses      = ["192.168.100.${21 + count.index}"]
    hostname       = "k8s-worker-${count.index + 1}"
  }

  disk {
    volume_id = libvirt_volume.k8s_worker[count.index].id
  }

  console {
    type        = "pty"
    target_port = "0"
    target_type = "serial"
  }

  graphics {
    type        = "spice"
    listen_type = "address"
    autoport    = true
  }
}
```

Deploy VMs:
```bash
terraform init
terraform plan
terraform apply -auto-approve
```

---

## 🔧 Step 2: Initial VM Setup (Semua Node)

Login ke setiap VM dan jalankan commands berikut. Bisa pakai script atau manual satu-satu:

### Update System & Install Prerequisites
```bash
# Update system
sudo apt-get update -y && sudo apt upgrade -y --with-new-pkgs

# Install required packages
sudo apt-get install -y \
  apt-transport-https \
  ca-certificates \
  curl \
  gpg \
  software-properties-common \
  nano \
  htop \
  net-tools
```

### Configure Hosts File
```bash
# Edit hosts file untuk semua nodes
sudo nano /etc/hosts

# Tambahkan entries berikut:
192.168.100.11 k8s-master
192.168.100.21 k8s-worker-1  
192.168.100.22 k8s-worker-2
```

### Set Timezone
```bash
sudo timedatectl set-timezone Asia/Jakarta
```

### Disable Swap (Critical!)
```bash
# Disable swap immediately
sudo swapoff -a

# Disable swap permanently
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Verify swap is disabled
free -h
```

---

## 🌐 Step 3: Configure Kernel Modules & Networking

### Load Required Kernel Modules
```bash
# Load modules immediately
sudo modprobe overlay
sudo modprobe br_netfilter

# Make modules persistent across reboots
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
```

### Configure Kernel Parameters
```bash
# Setup networking parameters for Kubernetes
cat <<EOF | sudo tee /etc/sysctl.d/99-k8s-sysctl.conf
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-arptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.conf.all.rp_filter         = 1
EOF

# Apply settings
sudo sysctl --system

# Verify settings
sudo sysctl net.bridge.bridge-nf-call-iptables
```

---

## 📦 Step 4: Install Container Runtime (Containerd)

### Add Docker Repository
```bash
# Create keyrings directory (for Ubuntu < 22.04)
sudo install -m 0755 -d /etc/apt/keyrings

# Add Docker GPG key
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add Docker repository
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
```

### Install & Configure Containerd
```bash
# Update package list and install containerd
sudo apt-get update
sudo apt-get install -y containerd.io

# Generate default configuration
sudo containerd config default | sudo tee /etc/containerd/config.toml

# Configure systemd cgroup driver (IMPORTANT!)
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# Restart and enable containerd
sudo systemctl restart containerd
sudo systemctl enable containerd

# Verify containerd is running
sudo systemctl status containerd
```

**Pro tip**: Kalau mau manual edit config, cari section `[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]` dan set `SystemdCgroup = true`.

---

## ☸️ Step 5: Install Kubernetes Components

### Add Kubernetes Repository
```bash
# Create keyrings directory (if not exists)
sudo mkdir -p -m 755 /etc/apt/keyrings

# Add Kubernetes GPG key
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add Kubernetes repository
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
```

### Install Kubernetes Tools
```bash
# Update package list
sudo apt-get update

# Install kubelet, kubeadm, kubectl
sudo apt-get install -y kubelet kubeadm kubectl

# Hold packages to prevent automatic updates
sudo apt-mark hold kubelet kubeadm kubectl

# Enable kubelet service
sudo systemctl enable kubelet

# Verify installation
kubeadm version
kubectl version --client
```

---

## 🎛️ Step 6: Initialize Master Node

**⚠️ HANYA di Master Node (k8s-master):**

### Initialize Cluster
```bash
# Initialize Kubernetes cluster
sudo kubeadm init \
  --apiserver-advertise-address=192.168.100.11 \
  --pod-network-cidr=192.168.0.0/16 \
  --node-name=k8s-master

# Setup kubectl for regular user
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Verify cluster status
kubectl cluster-info
kubectl get nodes
```

**Important**: Save the `kubeadm join` command yang muncul setelah init! Format:
```bash
kubeadm join 192.168.100.11:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>
```

---

## 🕸️ Step 7: Install CNI Plugin (Calico)

**Masih di Master Node:**

### Install Calico
```bash
# Download and apply Calico manifest
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/tigera-operator.yaml

# Download custom resources
curl -L https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/custom-resources.yaml -o calico-custom-resources.yaml

# Apply custom resources
kubectl create -f calico-custom-resources.yaml

# Verify Calico installation
kubectl get pods -n calico-system
```

### Install Calicoctl (Optional tapi Recommended)
```bash
# Download calicoctl binary
curl -L https://github.com/projectcalico/calico/releases/download/v3.29.2/calicoctl-linux-amd64 -o calicoctl

# Make executable and move to PATH
chmod +x calicoctl
sudo mv calicoctl /usr/local/bin/

# Verify installation
calicoctl version
```

---

## 👷 Step 8: Join Worker Nodes

**Di setiap Worker Node (k8s-worker-1 dan k8s-worker-2):**

### Join Cluster
Jalankan command join yang didapat dari master node initialization:

```bash
# Example command (ganti dengan token actual)
sudo kubeadm join 192.168.100.11:6443 \
  --token <your-token> \
  --discovery-token-ca-cert-hash sha256:<your-hash>
```

### Verify di Master Node
```bash
# Cek semua nodes sudah Ready
kubectl get nodes

# Expected output:
# NAME           STATUS   ROLES           AGE   VERSION
# k8s-master     Ready    control-plane   10m   v1.32.0
# k8s-worker-1   Ready    <none>          5m    v1.32.0
# k8s-worker-2   Ready    <none>          5m    v1.32.0

# Cek pod system berjalan normal
kubectl get pods --all-namespaces
```

---

## 🎯 Step 9: Test Deployment

Mari test cluster dengan deploy aplikasi sederhana:

### Deploy Nginx
```bash
# Create deployment
kubectl create deployment nginx-test --image=nginx:latest --replicas=3

# Expose deployment
kubectl expose deployment nginx-test --port=80 --type=NodePort

# Check deployment status
kubectl get deployments
kubectl get pods -o wide
kubectl get services
```

### Test Connectivity
```bash
# Get NodePort
kubectl get svc nginx-test

# Test dari dalam cluster
kubectl run test-pod --image=busybox --rm -it --restart=Never -- wget -qO- nginx-test:80

# Test dari luar cluster (ganti dengan NodePort actual)
curl http://192.168.100.21:<NodePort>
```

---

## 🔧 Advanced Configuration

### Install Metrics Server
```bash
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

# Verify
kubectl top nodes
kubectl top pods
```

### Setup Ingress Controller (Nginx)
```bash
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/baremetal/deploy.yaml

# Wait for ingress controller to be ready
kubectl wait --namespace ingress-nginx \
  --for=condition=ready pod \
  --selector=app.kubernetes.io/component=controller \
  --timeout=120s
```

---

## 🚨 Troubleshooting Common Issues

### Node Not Ready
```bash
# Check kubelet status
sudo systemctl status kubelet

# Check kubelet logs
sudo journalctl -u kubelet -f

# Common fixes:
sudo systemctl restart kubelet
sudo systemctl restart containerd
```

### Pod Stuck in Pending
```bash
# Check node resources
kubectl describe nodes

# Check pod events
kubectl describe pod <pod-name>

# Common causes: insufficient resources, node not ready
```

### CNI Issues
```bash
# Restart Calico pods
kubectl rollout restart daemonset/calico-node -n calico-system

# Check Calico status
kubectl get pods -n calico-system
calicoctl node status
```

### Join Token Expired
```bash
# Generate new token (di master node)
kubeadm token create --print-join-command
```

---

## 📊 Monitoring & Maintenance

### Useful Commands
```bash
# Check cluster health
kubectl cluster-info dump

# Check resource usage
kubectl top nodes
kubectl top pods --all-namespaces

# View cluster events
kubectl get events --sort-by=.metadata.creationTimestamp

# Check service accounts
kubectl get serviceaccounts --all-namespaces
```

### Regular Maintenance
```bash
# Update Kubernetes components
sudo apt update
sudo apt upgrade kubeadm kubelet kubectl

# Backup etcd (important!)
sudo ETCDCTL_API=3 etcdctl snapshot save backup.db \
  --endpoints=https://127.0.0.1:2379 \
  --cacert=/etc/kubernetes/pki/etcd/ca.crt \
  --cert=/etc/kubernetes/pki/etcd/server.crt \
  --key=/etc/kubernetes/pki/etcd/server.key
```

---

## 🎯 What's Next?

Congrats! Sekarang sudah punya **production-ready Kubernetes cluster** yang berjalan di homelab. Selanjutnya bisa explore:

🚀 **Deploy complex applications** dengan Helm charts  
🚀 **Setup persistent storage** dengan Longhorn atau Ceph  
🚀 **Implement GitOps** dengan ArgoCD atau Flux  
🚀 **Add monitoring stack** dengan Prometheus + Grafana  
🚀 **Practice disaster recovery** dengan backup/restore procedures  

### Recommended Next Steps:
1. **Install Helm** - Package manager untuk Kubernetes
2. **Setup Persistent Volumes** - Untuk stateful applications
3. **Deploy sample microservices** - Practice real-world scenarios
4. **Learn YAML manifests** - Deep dive into Kubernetes resources
5. **Explore security** - RBAC, Network Policies, Pod Security

---

## 💭 Final Thoughts

Setting up Kubernetes dari scratch might seem overwhelming, tapi ini adalah **fundamental skill** yang invaluable buat modern infrastructure. Dengan homelab cluster ini, bisa:

- **Understand Kubernetes internals** secara mendalam
- **Practice deployment strategies** tanpa fear of breaking production
- **Learn troubleshooting** dalam controlled environment  
- **Build confidence** dengan container orchestration

Remember: **Kubernetes is a journey, not a destination**. Keep experimenting, breaking things (safely), dan learning from mistakes. That's how expertise develops! 🚀

---

*Questions atau stuck di step manapun? Reach out ke febryanramadhan@gmail.com mari troubleshoot together! Building strong Kubernetes community starts with helping each other 💪*

**Coming up next**: "Deploy Production-Ready Applications di Kubernetes Homelab" - Stay tuned! 👀1b:T229c,

> **TL;DR**: Pengen belajar infrastruktur tapi budget pas-pasan? Tenang, kita bakal transform laptop biasa jadi homelab KVM yang powerful pakai WSL2. Siap-siap jadi infrastructure engineer tanpa keluar duit banyak! 🚀

## Kenapa Harus Repot-repot? 🤔

Sebelum kita dive in, mungkin ada yang bertanya: "Ngapain sih ribet-ribet setup KVM di laptop kalau bisa sewa VPS?"

**Simple answer**: Skills > Money 💪

- **VPS costs money** yang mungkin belum ada sebagai fresh graduate
- **Learning by doing** jauh lebih powerful daripada cuma baca-baca teori
- **Portfolio builder** - recruiter bakal impressed sama yang punya pengalaman hands-on
- **Flexibility** - bisa eksperimen sebanyak yang diinginkan tanpa takut tagihan membengkak

---

## 🔧 Pre-requisites: Yang Dibutuhin

Before we start, pastikan sudah punya:

✅ **Windows 10/11** dengan WSL2 enabled  
✅ **Minimal 8GB RAM** (16GB recommended kalau mau nyaman)  
✅ **CPU yang support virtualization** (Intel VT-x atau AMD-V)  
✅ **Space kosong minimal 50GB** buat VM-VM nanti  
✅ **Mental yang kuat** buat debugging (this is important! 😅)

---

## 🚀 Step 1: Setup Foundation - Enable Nested Virtualization

First things first, kita perlu mastiin nested virtualization aktif. Ini basically virtualization di dalam virtualization - mind blown right? 🤯

### Cek Status Current
```bash
cat /sys/module/kvm_intel/parameters/nested
```

**Expected output**: `Y` (kalau Intel) atau cek `/sys/module/kvm_amd/parameters/nested` kalau AMD.

### Kalau Belum Aktif...
Buka **PowerShell as Administrator** di Windows, terus jalanin:

```powershell
# Cek nama WSL distro
wsl --list --verbose

# Replace 'Ubuntu' dengan nama distro
wsl --shutdown Ubuntu
Get-VMProcessor -VMName "Ubuntu" | Set-VMProcessor -ExposeVirtualizationExtensions $true
wsl -d Ubuntu
```

**Pro tip**: Kalau command di atas error, coba restart Windows dulu. Sometimes Windows just needs a good ol' reboot 🔄

---

## 🛠️ Step 2: Install KVM Stack - The Real Deal

Sekarang saatnya install semua tools yang dibutuhin. Copy-paste is your friend here:

```bash
# Update system dulu biar gak ada drama
sudo apt update && sudo apt upgrade -y

# Install KVM dan kawan-kawannya
sudo apt install -y \
  qemu-system \
  qemu-utils \
  libvirt-clients \
  libvirt-daemon-system \
  bridge-utils \
  virt-manager \
  cpu-checker \
  libguestfs-tools \
  libosinfo-bin

# Bonus tools yang bakal berguna nanti
sudo apt install -y \
  python3 \
  python3-pip \
  genisoimage \
  wget \
  curl \
  unzip
```

### Add User ke Libvirt Group
```bash
sudo usermod -aG libvirt $USER
sudo usermod -aG kvm $USER

# Logout terus login lagi biar changes take effect
exit
# Buka WSL lagi
```

---

## ⚡ Step 3: Fire Up the Services

```bash
# Enable dan start libvirt services
sudo systemctl enable --now libvirtd
sudo systemctl enable --now virtlogd

# Cek status - harus running semua
sudo systemctl status libvirtd
sudo systemctl status virtlogd
```

### Validation Time! 🎯
```bash
# Command ini bakal ngecek semua requirements
sudo virt-host-validate

# Kalau ada yang FAIL, jangan panik dulu
# Beberapa warnings itu normal di environment WSL2
```

**What to expect**: Beberapa checks mungkin WARN atau FAIL, especially yang berkaitan dengan hardware security. That's totally fine untuk learning environment!

---

## 🏗️ Step 4: Setup Terraform + Libvirt Provider

Sekarang kita bakal install Terraform buat Infrastructure as Code experience yang lebih pro:

### Install Terraform
```bash
# Add HashiCorp GPG key
wget -O- https://apt.releases.hashicorp.com/gpg | \
  sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

# Add repository
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
sudo tee /etc/apt/sources.list.d/hashicorp.list

# Install Terraform
sudo apt update && sudo apt install terraform -y

# Verify installation
terraform --version
```

### Setup Libvirt Provider
```bash
# Create directory structure
mkdir -p ~/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/0.7.1/linux_amd64

# Download libvirt provider (adjust version as needed)
cd /tmp
wget https://github.com/dmacvicar/terraform-provider-libvirt/releases/download/v0.7.1/terraform-provider-libvirt-0.7.1+git.1f9b302.Ubuntu.amd64.tar.gz

# Extract dan install
tar -xvf terraform-provider-libvirt-*.tar.gz
mv terraform-provider-libvirt ~/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/0.7.1/linux_amd64/
chmod +x ~/.local/share/terraform/plugins/registry.terraform.io/dmacvicar/libvirt/0.7.1/linux_amd64/terraform-provider-libvirt
```

---

## 💾 Step 5: Storage Management yang Rapi

Kita perlu setup storage pools buat organize ISO files dan VM disks. Think of it as creating folders, but fancier:

```bash
# Create directories
sudo mkdir -p /data/isos
sudo mkdir -p /data/vms
sudo chown -R $USER:$USER /data/

# Define storage pools
virsh pool-define-as vms dir - - - - "/data/vms"
virsh pool-define-as isos dir - - - - "/data/isos"

# Set autostart (biar otomatis start pas boot)
virsh pool-autostart vms
virsh pool-autostart isos

# Start the pools
virsh pool-start vms
virsh pool-start isos

# Verify
virsh pool-list --all
```

**Expected output**: Both pools should show as **active** dan **autostart yes**.

---

## 🌐 Step 6: Virtual Networking Setup

Time to create isolated networks buat VM-VM. Ini penting banget buat simulate real-world scenarios:

### Create Network Definition
```bash
# Create network config file
cat > /tmp/net-lab.xml << 'EOF'
<network>
  <name>net-lab</name>
  <forward mode='nat'>
    <nat>
      <port start='1024' end='65535'/>
    </nat>
  </forward>
  <bridge name='virbr-lab' stp='on' delay='0'/>
  <domain name='lab.local'/>
  <ip address='192.168.100.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.100.10' end='192.168.100.100'/>
    </dhcp>
  </ip>
</network>
EOF

# Define and start the network
virsh net-define /tmp/net-lab.xml
virsh net-autostart net-lab
virsh net-start net-lab

# Verify
virsh net-list --all
```

---

## 🎯 Step 7: Quick Test - Download dan Test ISO

Mari kita test setup dengan download ISO dan create VM pertama:

```bash
# Download Ubuntu Server ISO (lightweight option)
cd /data/isos
wget https://releases.ubuntu.com/22.04/ubuntu-22.04.3-live-server-amd64.iso

# Create your first VM via command line
virt-install \
  --name test-vm \
  --ram 1024 \
  --disk path=/data/vms/test-vm.qcow2,size=10 \
  --vcpus 1 \
  --os-variant ubuntu22.04 \
  --network network=net-lab \
  --graphics none \
  --console pty,target_type=serial \
  --location /data/isos/ubuntu-22.04.3-live-server-amd64.iso \
  --extra-args 'console=ttyS0,115200n8 serial'
```

---

## 🚨 Common Issues & Troubleshooting

### "Permission denied" errors
```bash
# Fix libvirt permissions
sudo chmod 666 /var/run/libvirt/libvirt-sock
# Or add to group (better solution)
sudo usermod -aG libvirt $USER
```

### "Nested virtualization not supported"
- Restart Windows completely
- Check BIOS settings - enable Intel VT-x atau AMD-V
- Verify WSL2 VM settings dalam Hyper-V

### VMs super slow
- Allocate more RAM ke WSL2 di `.wslconfig`
- Enable CPU extensions di VM creation

---

## 🎉 What's Next? Level Up Your Game!

Congrats! Sekarang sudah punya homelab KVM yang functional. Selanjutnya bisa:

🔥 **Create multi-VM clusters** buat simulate production environments  
🔥 **Experiment dengan Kubernetes** tanpa takut break production  
🔥 **Practice Infrastructure as Code** dengan Terraform  
🔥 **Build CI/CD pipelines** yang deploy ke VM clusters  
🔥 **Learn container orchestration** dengan setup sendiri  

### Pro Tips buat Next Steps:
1. **Automate everything** - Write Terraform configs buat VM provisioning
2. **Monitor your lab** - Install Prometheus + Grafana
3. **Practice disaster recovery** - Backup dan restore VMs
4. **Document everything** - Future self will thank present self

---

## 💭 Closing Thoughts

Setup KVM di WSL2 might seem overwhelming di awal, tapi trust me - ini investment terbaik yang bisa dilakukan buat career development. Dengan homelab sendiri, bisa:

- **Experiment freely** tanpa takut biaya cloud
- **Build real-world experience** yang recruiters appreciate  
- **Stay updated** dengan latest infrastructure trends
- **Debug skills** yang invaluable di production environments

Remember: **Every senior engineer started somewhere**. Yang penting mulai, learn from mistakes, dan keep iterating. Good luck, dan happy learning! 🚀

---

*Punya pertanyaan atau stuck di salah satu step? Bisa reach out di email febryanramadhan@gmail.com! Let's build this infrastructure community together 💪*

**Next post**: "Bikin Kubernetes Cluster di KVM - From Zero to Hero" - Stay tuned! 👀1c:T2d67,
# Tutorial: Deploy n8n Gratis di Google Cloud Platform (Always Free Tier)

## Pendahuluan

Setelah menggunakan GCP selama 12 bulan dengan $300 credit, sekarang saatnya memanfaatkan **Always Free Tier** untuk menjalankan n8n secara permanen tanpa biaya. Tutorial ini akan memandu Anda step-by-step untuk setup n8n menggunakan resource yang tersedia gratis selamanya di GCP.

## GCP Always Free Tier Specifications

### Compute Engine Always Free
- **Instance Type**: e2-micro 
- **vCPU**: 1 shared core
- **Memory**: 1 GB RAM
- **Storage**: 30 GB HDD persistent disk
- **Network**: 1 GB egress per bulan (ke luar region US)
- **Region**: Terbatas di US regions (us-west1, us-central1, us-east1)
- **Limitation**: Maksimal 1 instance per akun

### Additional Always Free Resources
- **Cloud Storage**: 5 GB regional storage
- **Cloud Functions**: 2 juta invocations per bulan
- **BigQuery**: 1 TB query per bulan
- **Cloud Build**: 120 build-minutes per hari

## Prerequisites

1. Akun Google Cloud yang sudah terverifikasi
2. Credit card untuk verifikasi (tidak akan dicharge untuk free tier)
3. Akses SSH (bisa pakai browser atau terminal)
4. Domain atau siap pakai IP public langsung

## Step 1: Setup Project dan Enable APIs

### 1.1 Create New Project
```bash
# Via gcloud CLI (optional)
gcloud projects create n8n-automation-project --name="n8n Automation"
gcloud config set project n8n-automation-project
```

**Via Console:**
1. Masuk ke [Google Cloud Console](https://console.cloud.google.com)
2. Klik dropdown project → "New Project"
3. Nama project: `n8n-automation`
4. Klik "Create"

### 1.2 Enable Required APIs
```bash
gcloud services enable compute.googleapis.com
gcloud services enable cloudbuild.googleapis.com
```

**Via Console:**
1. Navigation menu → APIs & Services → Library
2. Search dan enable:
   - Compute Engine API
   - Cloud Resource Manager API

## Step 2: Create VM Instance (Always Free)

### 2.1 Instance Configuration

**Via Console (Recommended):**
1. Navigation menu → Compute Engine → VM instances
2. Klik "Create Instance"

**Instance Details:**
- **Name**: `n8n-server`
- **Region**: `us-central1` (Iowa) - Always Free eligible
- **Zone**: `us-central1-a`

**Machine Configuration:**
- **Machine family**: General-purpose
- **Series**: E2
- **Machine type**: `e2-micro` (1 vCPU, 1 GB memory) ⚠️ **Wajib untuk free tier**

**Boot Disk:**
- **Operating System**: Ubuntu
- **Version**: Ubuntu 20.04 LTS
- **Boot disk type**: Standard persistent disk
- **Size**: 30 GB (maksimal untuk free tier)

**Firewall:**
- ✅ Allow HTTP traffic
- ✅ Allow HTTPS traffic

### 2.2 Advanced Options

**Networking → Network interfaces:**
- **External IPv4 address**: Ephemeral (kita akan upgrade ke static nanti)

**Security → SSH Keys:**
- Tambahkan SSH public key jika punya
- Atau bisa pakai SSH browser nanti

### 2.3 Create Instance
Klik "Create" dan tunggu ~2-3 menit sampai instance running.

## Step 3: Setup Static IP (Optional tapi Recommended)

### 3.1 Reserve Static External IP
```bash
gcloud compute addresses create n8n-static-ip --region=us-central1
```

**Via Console:**
1. VPC network → External IP addresses
2. Klik "Reserve Static Address"
3. Name: `n8n-static-ip`
4. Region: `us-central1`
5. Attach to: pilih instance `n8n-server`

**💰 Cost Note**: Static IP gratis selama attached ke running instance. Kena charge $0.01/jam jika instance di-stop.

## Step 4: Initial Server Setup

### 4.1 Connect via SSH
```bash
# Via gcloud CLI
gcloud compute ssh n8n-server --zone=us-central1-a

# Via browser: klik "SSH" di console VM instances
```

### 4.2 Update System
```bash
sudo apt update && sudo apt upgrade -y
```

### 4.3 Install Docker & Docker Compose
```bash
# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

# Add user to docker group
sudo usermod -aG docker $USER

# Install Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Restart session untuk apply group changes
exit
```

Reconnect SSH setelah exit.

### 4.4 Verify Installation
```bash
docker --version
docker-compose --version
```

## Step 5: Deploy n8n dengan Docker Compose

### 5.1 Create Project Directory
```bash
mkdir ~/n8n-docker
cd ~/n8n-docker
```

### 5.2 Create Docker Compose File
```bash
nano docker-compose.yml
```

**docker-compose.yml content:**
```yaml
version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "80:5678"
    environment:
      - N8N_HOST=YOUR_DOMAIN_OR_IP
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://YOUR_DOMAIN_OR_IP
      - GENERIC_TIMEZONE=Asia/Jakarta
      - N8N_LOG_LEVEL=info
      - N8N_USER_FOLDER=/home/node/.n8n
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=ChangeThisPassword123!
    volumes:
      - n8n_data:/home/node/.n8n
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  n8n_data:
    driver: local
```

**Replace values:**
- `YOUR_DOMAIN_OR_IP`: Static IP atau domain Anda
- `N8N_BASIC_AUTH_PASSWORD`: Password yang kuat

### 5.3 Start n8n
```bash
docker-compose up -d
```

### 5.4 Check Status
```bash
docker-compose ps
docker-compose logs n8n
```

## Step 6: Configure Firewall Rules

### 6.1 Create Firewall Rule for n8n
```bash
gcloud compute firewall-rules create allow-n8n \
    --allow tcp:80,tcp:443 \
    --source-ranges 0.0.0.0/0 \
    --description "Allow HTTP and HTTPS for n8n"
```

**Via Console:**
1. VPC network → Firewall
2. Create Firewall Rule:
   - Name: `allow-n8n`
   - Direction: Ingress
   - Targets: All instances in the network
   - Source IP ranges: `0.0.0.0/0`
   - Protocols and ports: TCP, ports 80, 443

## Step 7: Setup SSL dengan Let's Encrypt (Optional)

### 7.1 Install Certbot
```bash
sudo apt install certbot python3-certbot-nginx -y
```

### 7.2 Install Nginx
```bash
sudo apt install nginx -y
```

### 7.3 Configure Nginx
```bash
sudo nano /etc/nginx/sites-available/n8n
```

**Nginx config:**
```nginx
server {
    listen 80;
    server_name your-domain.com;

    location / {
        proxy_pass http://localhost:5678;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}
```

### 7.4 Enable Site & Get SSL
```bash
sudo ln -s /etc/nginx/sites-available/n8n /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx

# Get SSL certificate
sudo certbot --nginx -d your-domain.com
```

## Step 8: Monitoring Resource Usage

### 8.1 Setup Monitoring Script
```bash
nano ~/monitor-resources.sh
```

**monitor-resources.sh:**
```bash
#!/bin/bash
echo "=== System Resources ==="
echo "CPU Usage:"
top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4"%"}'

echo "Memory Usage:"
free -h | awk '/^Mem:/ {print $3 "/" $2 " (" int($3/$2 * 100) "%)"}'

echo "Disk Usage:"
df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}'

echo "Docker Containers:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo "n8n Logs (last 10 lines):"
docker-compose -f ~/n8n-docker/docker-compose.yml logs --tail=10 n8n
```

```bash
chmod +x ~/monitor-resources.sh
```

### 8.2 Create Cron Job untuk Auto-monitoring
```bash
crontab -e
```

**Add line:**
```bash
# Monitor resources every hour
0 * * * * ~/monitor-resources.sh >> ~/resource-monitor.log 2>&1
```

## Step 9: Optimization untuk Free Tier

### 9.1 Reduce Memory Usage
**Update docker-compose.yml dengan memory limits:**
```yaml
services:
  n8n:
    # ... existing config
    deploy:
      resources:
        limits:
          memory: 800M
        reservations:
          memory: 400M
```

### 9.2 Setup Swap (Recommended untuk 1GB RAM)
```bash
sudo fallocate -l 1G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile

# Make permanent
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
```

### 9.3 Cleanup Script
```bash
nano ~/cleanup.sh
```

**cleanup.sh:**
```bash
#!/bin/bash
# Docker cleanup
docker system prune -f
docker volume prune -f

# System cleanup
sudo apt autoremove -y
sudo apt autoclean

# Clear logs older than 7 days
sudo journalctl --vacuum-time=7d

echo "Cleanup completed!"
```

```bash
chmod +x ~/cleanup.sh
```

**Schedule weekly cleanup:**
```bash
crontab -e
# Add:
0 2 * * 0 ~/cleanup.sh >> ~/cleanup.log 2>&1
```

## Step 10: Backup Strategy

### 10.1 Backup n8n Data
```bash
nano ~/backup-n8n.sh
```

**backup-n8n.sh:**
```bash
#!/bin/bash
BACKUP_DIR="$HOME/n8n-backups"
DATE=$(date +%Y%m%d_%H%M%S)

mkdir -p $BACKUP_DIR

# Stop n8n
cd ~/n8n-docker
docker-compose stop n8n

# Create backup
sudo tar -czf $BACKUP_DIR/n8n-backup-$DATE.tar.gz -C /var/lib/docker/volumes n8n-docker_n8n_data

# Start n8n
docker-compose start n8n

# Keep only last 5 backups
cd $BACKUP_DIR
ls -t n8n-backup-*.tar.gz | tail -n +6 | xargs -r rm

echo "Backup completed: n8n-backup-$DATE.tar.gz"
```

```bash
chmod +x ~/backup-n8n.sh
```

**Schedule daily backup:**
```bash
crontab -e
# Add:
0 3 * * * ~/backup-n8n.sh >> ~/backup.log 2>&1
```

## Step 11: Access n8n

1. Buka browser ke `http://YOUR_STATIC_IP` atau `https://your-domain.com`
2. Login dengan:
   - Username: `admin`
   - Password: yang Anda set di docker-compose.yml
3. Mulai buat workflow pertama!

## Troubleshooting

### Common Issues:

**1. Out of Memory:**
```bash
# Check memory usage
free -h
# Add more swap or optimize workflows

# Restart n8n if needed
cd ~/n8n-docker
docker-compose restart n8n
```

**2. Disk Space Full:**
```bash
# Check disk usage
df -h
# Run cleanup script
~/cleanup.sh
```

**3. Instance Stopped Unexpectedly:**
```bash
# Check instance status
gcloud compute instances list
# Start instance
gcloud compute instances start n8n-server --zone=us-central1-a
```

**4. n8n Container Keeps Restarting:**
```bash
# Check logs
docker-compose logs n8n
# Common fix: reduce memory limit or add swap
```

## Tips Agar Tetap Gratis

1. **Monitor Usage**: Set billing alerts di GCP console
2. **Single Instance**: Hanya jalankan 1 e2-micro instance
3. **Regional Limit**: Gunakan hanya US regions
4. **Network Usage**: Monitor egress ke luar US (limit 1GB/bulan)
5. **Stop When Not Needed**: Stop instance jika tidak dipakai lama
6. **Regular Cleanup**: Jalankan cleanup script mingguan

## Performance Expectations

Dengan spek e2-micro (1 vCPU, 1GB RAM):
- **Workflow concurrent**: 2-3 workflows ringan
- **Response time**: 2-5 detik untuk workflow sederhana
- **Uptime**: 99%+ dengan monitoring yang baik
- **Suitable for**: Personal automation, small team workflows

## Kesimpulan

Setup ini memberikan Anda n8n automation server yang berjalan **gratis selamanya** di GCP Always Free Tier. Dengan monitoring dan optimization yang tepat, server ini bisa handle automation tasks personal atau small team dengan baik.

Total biaya bulanan: **$0** (selama tetap dalam free tier limits)

## Next Steps

1. Explore n8n workflows di [n8n.io/workflows](https://n8n.io/workflows)
2. Setup webhook integrations
3. Connect dengan services yang sering Anda gunakan
4. Otomatisasi repetitive tasks sehari-hari

---

*Tutorial ini berdasarkan pengalaman real deployment dan testing di GCP Always Free Tier. Update terakhir: Juni 2025*1d:Tf91,Capek nyatet pengeluaran manual? Sekarang bisa otomatis cuma lewat chat Telegram! Kombinasi **n8n**, **Notion**, dan **Google Gemini AI**, kita bisa bikin sistem yang:

- Nerima teks/foto struk/screenshot via bot Telegram  
- AI ekstrak info penting (jumlah, kategori, dll)  
- Data langsung masuk ke database Notion  
- Bisa rekap pengeluaran otomatis  

Bayangin, kita cuma perlu kirim pesan "Beli kopi 25rb" atau foto struk belanja, dan semua data langsung tercatat rapi! ✨

## Apa Itu n8n dan kenapa powerful banget? 🚀

Cerita dikit tentang n8n. Ini tuh platform otomatisasi workflow yang powerful banget! Kita bisa menghubungkan berbagai aplikasi dan layanan tanpa perlu jago coding. 💻

Kelebihan n8n: 😍
- **Open Source dan Gratis** ✅: Bisa di-deploy sendiri, gak perlu bayar subscription
- **No-Code/Low-Code** 🧩: Cukup paham logika input-proses-output, drag and drop aja
- **Integrasi Banyak Platform** 🔄: Dari Notion, Google Sheets, Telegram, sampai AI tools, 500+ integrasi aplikasi
- **Fleksibel Banget** 🛠️: Bisa bikin workflow sesimple atau sekompleks yang kita mau

Yang penting paham flow datanya: input → proses → output. Gak perlu jago coding sama sekali! 🙌 (minimal paham logic dan parsing data)

Semua bisa kita buat tanpa coding rumit. Cuma drag-and-drop di n8n dan paham alur data aja. Simpel, fleksibel, powerful.

## Cara Bikinnya 🛠️
Kalau tertarik bikin juga, ini yang dibutuhkan:

1. **Internal Integration Secret Notion** 🔑 - Didapatkan dari [https://www.notion.so/profile/integrations](https://www.notion.so/profile/integrations)
2. **API Google Gemini AI** 🤖 - Didapatkan dari [https://aistudio.google.com/apikey](https://aistudio.google.com/apikey)
3. **API Bot Telegram** 💬 - Dibuat melalui BotFather di Telegram
4. **Template Notion** 📋 - Duplikat dari [template ini](https://battle-option-f5f.notion.site/200241ec407a80b4818ad5a1052d2b3d?v=200241ec407a81358320000cf264c9ae)

## Template n8n 👇
Awalnya pakai template yang cuma bisa kirim image, tapi kemudian diimprove supaya bisa nerima berbagai jenis input termasuk teks biasa 🔄

- Template base (thanks to Rizqi Pratama Ramadhani): [Finance Tracker Template](https://n8n.io/workflows/3960-automated-financial-tracker-telegram-invoices-to-notion-with-gemini-ai-reports/)
- Template yang saya improve: [Finance Tracker Template-improved](
https://drive.google.com/file/d/1tXEibyZChlPpIT8cK2rTpw3sY8D9msgq/view?usp=sharing
)

![Template n8n](/portfolio/images/template-n8n.png)

## Tutorial singkat 📝
- Siapin server n8n (deploy bisa pake docker atau langsung di server pake npm) bisa liat [di sini](https://twnb.nbtrisna.my.id/n8n-docker-install/) atau dokumentasi officialnya [di sini](https://docs.n8n.io/hosting/)


- Buat credential Notion, Google Gemini AI, dan Telegram Bot di n8n
![buat cred](/portfolio/images/buat-cred1.png)

- Isi API Notion, Google Gemini AI, dan Telegram Bot
- Import template bisa drag and drop atau import dari file JSON
- Duplikat template Notion di Notion ([template ini](https://battle-option-f5f.notion.site/200241ec407a80b4818ad5a1052d2b3d?v=200241ec407a81358320000cf264c9ae))

- Sesuaikan tiap node dengan meng-konekkan Credential Notion, Google Gemini AI, dan Telegram Bot yang sudah dibuat
![node detail](/portfolio/images/node-detail.png)

- Set active workflow

## Hasilnya 👀
![hasil tele 1](/portfolio/images/hasil1.png)
![hasil tele 2](/portfolio/images/hasil2.png)
![hasil notion](/portfolio/images/hasil-notion.png)

## Next yang bisa diimprove🚀
- Bikin inputan voice message
- Bikin report yang lebih detail
- Bikin fitur untuk update, delete atau nyari data
- Insights dari AI

## Kesimpulan 🎯

Buat kita yang gak pengen capek sama manual, automation ini bisa jadi game-changer! 🎮 Yang keren, gak perlu jago coding buat bikin ini. Cukup paham logika dasar aja.

Dengan n8n, dan AI, tracking keuangan jadi semudah kirim chat. Gak ada lagi alasan buat gak ngatur keuangan dengan baik! 💪
1e:T15d4,
**Artikel Test. Artikel ini dihasilkan oleh ChatGPT.**

# Var, Let, dan Const: Rahasia Penting yang Wajib Dipahami Developer!

Tahukah kamu bahwa salah memilih cara deklarasi variabel bisa membuat kode kamu menjadi *buggy* dan sulit dipahami? Di dunia JavaScript, ada tiga cara utama untuk mendeklarasikan variabel: `var`, `let`, dan `const`. Ketiganya sering disalahgunakan oleh banyak developer, bahkan yang sudah berpengalaman sekalipun! Artikel ini akan membongkar perbedaan mendasar ketiga deklarasi ini dengan penjelasan lengkap dan contoh studi kasus.

---

## Apa Itu Var, Let, dan Const?

Sebelum masuk ke perbedaan, mari kita kenali satu per satu:

- **`var`**: Cara lama untuk mendeklarasikan variabel. Digunakan sebelum ES6 (2015).
- **`let`**: Alternatif modern untuk `var`, dirancang untuk memperbaiki kekurangan `var`.
- **`const`**: Mirip dengan `let`, tetapi digunakan untuk nilai yang tidak berubah.

---

## Perbedaan Utama (TL;DR)

| **Aspek**           | **var**                           | **let**                          | **const**                          |
|---------------------|-----------------------------------|-----------------------------------|------------------------------------|
| **Scope**           | Function scope                   | Block scope                      | Block scope                       |
| **Redeclaration**   | Bisa                             | Tidak bisa                       | Tidak bisa                        |
| **Reassignment**    | Bisa                             | Bisa                             | Tidak bisa                        |
| **Hoisting**        | Diangkat dengan nilai `undefined` | Diangkat tetapi tidak bisa digunakan sebelum deklarasi | Diangkat tetapi tidak bisa digunakan sebelum deklarasi |
| **Nilai Harus Diisi?** | Tidak                           | Tidak                            | Ya                                |

---

## Perbedaan Detail dengan Contoh

### 1. Scope (Ruang Lingkup)

- **`var`** hanya berlaku di dalam fungsi tempat ia dideklarasikan (function scope).
- **`let`** dan **`const`** hanya berlaku di dalam blok tempat mereka dideklarasikan (block scope).

**Contoh:**
```javascript showLineNumbers
if (true) {
    var x = 10;
    let y = 20;
    const z = 30;
}
console.log(x); // 10 (bisa diakses di luar blok if)
console.log(y); // Error! y tidak dikenal di luar blok if
console.log(z); // Error! z tidak dikenal di luar blok if
```

---

### 2. Redeclaration (Deklarasi Ulang)

- **`var`**: Bisa dideklarasikan ulang tanpa masalah (potensi konflik).
- **`let`** dan **`const`**: Tidak bisa dideklarasikan ulang di tempat yang sama (lebih aman).

**Contoh:**
```javascript
var a = 1;
var a = 2; // Tidak masalah (tetapi bisa membingungkan).

let b = 1;
// let b = 2; // Error! Tidak bisa dideklarasikan ulang.

const c = 1;
// const c = 2; // Error! Tidak bisa dideklarasikan ulang.
```

---

### 3. Reassignment (Mengubah Nilai)

- **`var` dan `let`**: Nilainya bisa diubah setelah dideklarasikan.
- **`const`**: Nilainya tidak bisa diubah.

**Contoh:**
```javascript
let name = "Ryan";
name = "Febryan"; // Oke, nilai diubah.

const age = 25;
// age = 26; // Error! Nilai tidak bisa diubah.
```

> **Catatan Penting**: Untuk objek dan array, `const` mengunci referensi, tetapi isi dalamnya tetap bisa diubah.

**Contoh:**
```javascript
const user = { name: "Ryan", age: 25 };
user.name = "Febryan"; // Oke, mengubah properti.

// Tapi:
// user = { name: "Uwi", age: 23 }; // Error! Tidak bisa mengganti objek.
```

---

### 4. Hoisting (Pengangkatan)

- **`var`**: Diangkat ke atas (hoisted) dengan nilai awal `undefined`.
- **`let` dan `const`**: Diangkat tetapi tidak bisa digunakan sebelum dideklarasikan (temporal dead zone).

**Contoh:**
```javascript
console.log(a); // undefined (var diangkat ke atas tetapi belum diisi nilai)
var a = 5;

// console.log(b); // Error! b tidak bisa digunakan sebelum deklarasi.
let b = 10;
```

---

## Kapan Harus Menggunakan Let atau Const?

1. **Gunakan `const` Sebisa Mungkin**
   - Jika nilai variabel tidak akan berubah, selalu gunakan `const`.

2. **Gunakan `let` Jika Nilai Akan Berubah**
   - Misalnya untuk nilai yang diperbarui dalam perulangan atau kondisi tertentu.

3. **Hindari `var`**
   - `var` hanya digunakan jika kamu bekerja dengan kode lama atau benar-benar perlu akses global dalam fungsi.

---

## Studi Kasus untuk Memperjelas

### Studi Kasus 1: Perulangan
Gunakan `let` agar setiap iterasi memiliki "kotak" sendiri.

**Contoh:**
```javascript
for (let i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 100);
}
// Output: 0, 1, 2

for (var i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 100);
}
// Output: 3, 3, 3 (semua iterasi berbagi "kotak" yang sama)
```

### Studi Kasus 2: Konfigurasi Aplikasi
Gunakan `const` untuk nilai yang tidak akan berubah.

**Contoh:**
```javascript
const APP_NAME = "CoolApp";
const MAX_USERS = 100;
console.log(`${APP_NAME} allows up to ${MAX_USERS} users.`);
```

---

## Kesimpulan

- **`const`**: Gunakan untuk nilai yang tidak berubah. Aman dan mudah dimengerti.
- **`let`**: Gunakan untuk nilai yang bisa berubah. Ideal untuk perulangan atau kondisi.
- **`var`**: Hindari jika memungkinkan. Gunakan hanya untuk kompatibilitas kode lama.

> **Tips Penting**: Jika ragu, mulai dengan `const`. Jika ternyata nilai perlu berubah, ubah ke `let`. Dengan begitu, kamu akan terhindar dari bug yang sulit dilacak.

Sudah paham perbedaannya? Mulai sekarang, buat kode JavaScript-mu lebih aman dan mudah dibaca dengan memilih deklarasi variabel yang tepat!

7:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"$15"}}],["$","$L16",null,{"content":{"compiledSource":"$17","frontmatter":{},"scope":{}},"frontmatter":{"slug":"javascript-variables","content":"$18","title":"Var, Let, dan Const: Rahasia Penting yang Wajib Dipahami Developer!","date":"2024-12-13","tags":["javascript","programming","coding-tips"],"category":"Programming","summary":"Pelajari perbedaan antara var, let, dan const di JavaScript serta kenapa kamu harus mulai menggunakan let dan const untuk kode yang lebih aman dan modern!","author":"Febryan Ramadhan","difficulty":"Beginner","keywords":["javascript","variables","var","let","const","programming"],"openGraph":{"title":"JavaScript Variables: var, let, dan const","description":"Pelajari perbedaan antara var, let, dan const di JavaScript untuk kode yang lebih aman dan modern.","type":"article"},"twitter":{"card":"summary_large_image","title":"JavaScript Variables: var, let, dan const","description":"Pelajari perbedaan antara var, let, dan const di JavaScript untuk kode yang lebih aman dan modern."},"schema":{"type":"BlogPosting","author":{"name":"Febryan Ramadhan","url":"https://pepryan.github.io"},"publisher":{"name":"Febryan Ramadhan Portfolio","url":"https://pepryan.github.io"}},"wordCount":779,"readingTime":4,"rawContent":"$19"},"allPosts":[{"slug":"install-kubernetes-kvm2-wsl2","content":"$1a","title":"Bikin Kubernetes Cluster di KVM - From Zero to Hero! 🚀","date":"2025-06-04","tags":["kubernetes","k8s","kvm","homelab","container-orchestration","kubeadm","calico"],"summary":"Tutorial step-by-step deploy Kubernetes cluster production-ready di homelab KVM. Dari setup VM sampai deploy aplikasi pertama!","category":"DevOps","author":"Febryan Ramadhan","difficulty":"Advanced","keywords":["kubernetes","kvm","wsl2","homelab","cluster","devops"],"openGraph":{"title":"Install Kubernetes di KVM WSL2: Production-Ready Cluster","description":"Tutorial step-by-step deploy Kubernetes cluster production-ready di homelab KVM.","type":"article"},"twitter":{"card":"summary_large_image","title":"Install Kubernetes di KVM WSL2: Production-Ready Cluster","description":"Tutorial step-by-step deploy Kubernetes cluster production-ready di homelab KVM."},"schema":{"type":"BlogPosting","author":{"name":"Febryan Ramadhan","url":"https://pepryan.github.io"},"publisher":{"name":"Febryan Ramadhan Portfolio","url":"https://pepryan.github.io"}},"wordCount":1735,"readingTime":9},{"slug":"install-kvm-wsl2-virtualization","content":"$1b","title":"Pengen Ngulik Infra? Setup KVM di WSL2 aja! Modal Laptop Biasa Cukup","date":"2025-06-04","tags":["kvm","wsl2","virtualization","homelab","infrastructure","terraform","libvirt"],"category":"DevOps","summary":"Tutorial lengkap bikin homelab KVM di laptop biasa pakai WSL2. Gak perlu sewa cloud mahal-mahal, cukup modal laptop kentang!","author":"Febryan Ramadhan","difficulty":"Intermediate","keywords":["kvm","wsl2","virtualization","homelab","linux","windows"],"openGraph":{"title":"Install KVM di WSL2: Homelab Virtualization Setup","description":"Tutorial lengkap setup homelab KVM di WSL2 untuk virtualization di laptop biasa.","type":"article"},"twitter":{"card":"summary_large_image","title":"Install KVM di WSL2: Homelab Virtualization Setup","description":"Tutorial lengkap setup homelab KVM di WSL2 untuk virtualization di laptop biasa."},"schema":{"type":"BlogPosting","author":{"name":"Febryan Ramadhan","url":"https://pepryan.github.io"},"publisher":{"name":"Febryan Ramadhan Portfolio","url":"https://pepryan.github.io"}},"wordCount":1171,"readingTime":6},{"slug":"deploy-n8n-gratis-di-google-cloud","content":"$1c","title":"Tutorial: Deploy n8n Gratis di Google Cloud Platform (Always Free Tier)","date":"2025-06-01","updated":"2025-06-01","tags":["n8n","automation","gcp","google-cloud","free-tier","deployment","tutorial","workflow","nocode","devops"],"draft":false,"summary":"Panduan lengkap deploy n8n automation platform secara gratis menggunakan Google Cloud Platform Always Free Tier. Setup permanent tanpa biaya dengan resource gratis selamanya.","author":"Febryan","category":"Tutorial","difficulty":"Intermediate","keywords":["n8n deployment","google cloud free tier","automation platform","workflow automation","free hosting","gcp tutorial","n8n tutorial","cloud deployment"],"openGraph":{"title":"Deploy n8n Gratis di Google Cloud Platform - Tutorial Lengkap","description":"Pelajari cara deploy n8n automation platform secara gratis menggunakan GCP Always Free Tier. Panduan step-by-step dengan resource gratis selamanya.","image":"/portfolio/images/n8n-gcp-deployment.png","url":"https://pepryan.github.io/portfolio/blog/deploy-n8n-gratis-di-google-cloud"},"twitter":{"card":"summary_large_image","title":"Deploy n8n Gratis di Google Cloud Platform - Tutorial Lengkap","description":"Panduan lengkap deploy n8n automation platform secara gratis menggunakan GCP Always Free Tier. Setup permanent tanpa biaya!"},"schema":{"type":"TechArticle","headline":"Tutorial: Deploy n8n Gratis di Google Cloud Platform (Always Free Tier)","description":"Panduan lengkap deploy n8n automation platform secara gratis menggunakan Google Cloud Platform Always Free Tier dengan resource gratis selamanya.","author":{"name":"Febryan","url":"https://pepryan.github.io/portfolio"},"datePublished":"2025-06-01","dateModified":"2025-06-01","publisher":{"name":"Febryan Portfolio","url":"https://pepryan.github.io/portfolio"}},"wordCount":1574,"readingTime":8},{"slug":"automated-finance-tracker-with-ai","content":"$1d","title":"Bikin Finance Tracker Otomatis Pakai AI? Gampang Banget! 🤖💰 Pakai Telegram, n8n, Gemini AI, Notion","date":"2025-05-27","updated":"2025-05-28","tags":["automation","finance","n8n","notion","ai","telegram","nocode","lowcode","gemini"],"draft":false,"summary":"Capek nyatet pengeluaran manual? Coba bikin finance tracker otomatis pakai n8n, Notion, dan AI. Tinggal chat ke bot Telegram, semua data dirangkum AI dan langsung tercatat rapi di Notion! ✨","thumbnail":"/portfolio/images/template-n8n.png","author":"Febryan","category":"Tutorial","difficulty":"Intermediate","keywords":["finance tracker","automation","telegram bot","n8n workflow","notion database","ai integration","gemini ai","expense tracking","personal finance"],"openGraph":{"title":"Finance Tracker Otomatis dengan AI - Tutorial Lengkap","description":"Buat sistem finance tracker otomatis menggunakan Telegram Bot, n8n, Notion, dan Google Gemini AI. Catat pengeluaran jadi super mudah!","image":"/portfolio/images/template-n8n.png","url":"https://pepryan.github.io/portfolio/blog/automated-finance-tracker-with-ai"},"twitter":{"card":"summary_large_image","title":"Finance Tracker Otomatis dengan AI 🤖💰","description":"Tutorial bikin finance tracker otomatis pakai Telegram, n8n, Notion & AI. Tinggal chat, data langsung tercatat rapi!","image":"/portfolio/images/template-n8n.png"},"schema":{"type":"HowTo","headline":"Bikin Finance Tracker Otomatis Pakai AI? Gampang Banget!","description":"Panduan lengkap membuat sistem finance tracker otomatis menggunakan Telegram Bot, n8n workflow automation, Notion database, dan Google Gemini AI untuk tracking pengeluaran yang efisien.","author":{"name":"Febryan","url":"https://pepryan.github.io/portfolio"},"datePublished":"2025-05-27","dateModified":"2025-05-28","publisher":{"name":"Febryan Portfolio","url":"https://pepryan.github.io/portfolio"}},"wordCount":486,"readingTime":3},{"slug":"javascript-variables","content":"$1e","title":"Var, Let, dan Const: Rahasia Penting yang Wajib Dipahami Developer!","date":"2024-12-13","tags":"$7:1:props:frontmatter:tags","category":"Programming","summary":"Pelajari perbedaan antara var, let, dan const di JavaScript serta kenapa kamu harus mulai menggunakan let dan const untuk kode yang lebih aman dan modern!","author":"Febryan Ramadhan","difficulty":"Beginner","keywords":"$7:1:props:frontmatter:keywords","openGraph":"$7:1:props:frontmatter:openGraph","twitter":"$7:1:props:frontmatter:twitter","schema":"$7:1:props:frontmatter:schema","wordCount":779,"readingTime":4}]}]]
